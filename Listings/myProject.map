Component: Arm Compiler for Embedded 6.19 Tool: armlink [5e73cb00]

==============================================================================

Section Cross References

    main.o(.text.motorMovingFlagsSet) refers to rtx_evflags.o(.text.osEventFlagsSet) for osEventFlagsSet
    main.o(.text.motorMovingFlagsSet) refers to rtx_evflags.o(.text.osEventFlagsClear) for osEventFlagsClear
    main.o(.text.motorMovingFlagsSet) refers to main.o(.bss.movingGreenFlag) for movingGreenFlag
    main.o(.text.motorMovingFlagsSet) refers to main.o(.bss.movingRedFlag) for movingRedFlag
    main.o(.text.motorMovingFlagsSet) refers to main.o(.bss.stationGreenFlag) for stationGreenFlag
    main.o(.text.motorMovingFlagsSet) refers to main.o(.bss.stationRedFlag) for stationRedFlag
    main.o(.ARM.exidx.text.motorMovingFlagsSet) refers to main.o(.text.motorMovingFlagsSet) for [Anonymous Symbol]
    main.o(.text.motorStopFlagsSet) refers to rtx_evflags.o(.text.osEventFlagsSet) for osEventFlagsSet
    main.o(.text.motorStopFlagsSet) refers to rtx_evflags.o(.text.osEventFlagsClear) for osEventFlagsClear
    main.o(.text.motorStopFlagsSet) refers to main.o(.bss.stationGreenFlag) for stationGreenFlag
    main.o(.text.motorStopFlagsSet) refers to main.o(.bss.stationRedFlag) for stationRedFlag
    main.o(.text.motorStopFlagsSet) refers to main.o(.bss.movingGreenFlag) for movingGreenFlag
    main.o(.text.motorStopFlagsSet) refers to main.o(.bss.movingRedFlag) for movingRedFlag
    main.o(.ARM.exidx.text.motorStopFlagsSet) refers to main.o(.text.motorStopFlagsSet) for [Anonymous Symbol]
    main.o(.text.UART1_IRQHandler) refers to main.o(.bss.rx_data) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.UART1_IRQHandler) refers to main.o(.text.UART1_IRQHandler) for [Anonymous Symbol]
    main.o(.text.UART_led_control) refers to rtx_semaphore.o(.text.osSemaphoreRelease) for osSemaphoreRelease
    main.o(.text.UART_led_control) refers to motor_control.o(.text.forwardLeft) for forwardLeft
    main.o(.text.UART_led_control) refers to motor_control.o(.text.forwardRight) for forwardRight
    main.o(.text.UART_led_control) refers to motor_control.o(.text.stopMotors) for stopMotors
    main.o(.text.UART_led_control) refers to motor_control.o(.text.moveForward) for moveForward
    main.o(.text.UART_led_control) refers to motor_control.o(.text.moveBackward) for moveBackward
    main.o(.text.UART_led_control) refers to motor_control.o(.text.rotateLeft) for rotateLeft
    main.o(.text.UART_led_control) refers to motor_control.o(.text.rotateRight) for rotateRight
    main.o(.text.UART_led_control) refers to rtx_evflags.o(.text.osEventFlagsSet) for osEventFlagsSet
    main.o(.text.UART_led_control) refers to rtx_evflags.o(.text.osEventFlagsClear) for osEventFlagsClear
    main.o(.text.UART_led_control) refers to main.o(.bss.rx_data) for [Anonymous Symbol]
    main.o(.text.UART_led_control) refers to main.o(.bss.stationRedFlag) for stationRedFlag
    main.o(.text.UART_led_control) refers to main.o(.bss.stationGreenFlag) for stationGreenFlag
    main.o(.text.UART_led_control) refers to main.o(.bss.movingRedFlag) for movingRedFlag
    main.o(.text.UART_led_control) refers to main.o(.bss.movingGreenFlag) for movingGreenFlag
    main.o(.text.UART_led_control) refers to main.o(.bss.startSem) for startSem
    main.o(.text.UART_led_control) refers to main.o(.bss.endSem) for endSem
    main.o(.text.UART_led_control) refers to main.o(.bss.runningBuzzerFlag) for runningBuzzerFlag
    main.o(.ARM.exidx.text.UART_led_control) refers to main.o(.text.UART_led_control) for [Anonymous Symbol]
    main.o(.text.movingGreenLED) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    main.o(.text.movingGreenLED) refers to colorhandler.o(.text.startMovingGreen) for startMovingGreen
    main.o(.text.movingGreenLED) refers to main.o(.bss.movingGreenFlag) for movingGreenFlag
    main.o(.ARM.exidx.text.movingGreenLED) refers to main.o(.text.movingGreenLED) for [Anonymous Symbol]
    main.o(.text.stationGreenLED) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    main.o(.text.stationGreenLED) refers to colorhandler.o(.text.startStationGreen) for startStationGreen
    main.o(.text.stationGreenLED) refers to main.o(.bss.stationGreenFlag) for stationGreenFlag
    main.o(.ARM.exidx.text.stationGreenLED) refers to main.o(.text.stationGreenLED) for [Anonymous Symbol]
    main.o(.text.movingRedLED) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    main.o(.text.movingRedLED) refers to colorhandler.o(.text.startSlowFlashRed) for startSlowFlashRed
    main.o(.text.movingRedLED) refers to main.o(.bss.movingRedFlag) for movingRedFlag
    main.o(.ARM.exidx.text.movingRedLED) refers to main.o(.text.movingRedLED) for [Anonymous Symbol]
    main.o(.text.stationRedLED) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    main.o(.text.stationRedLED) refers to colorhandler.o(.text.startFastFlashRed) for startFastFlashRed
    main.o(.text.stationRedLED) refers to main.o(.bss.stationRedFlag) for stationRedFlag
    main.o(.ARM.exidx.text.stationRedLED) refers to main.o(.text.stationRedLED) for [Anonymous Symbol]
    main.o(.text.movingBuzzer) refers to rtx_semaphore.o(.text.osSemaphoreAcquire) for osSemaphoreAcquire
    main.o(.text.movingBuzzer) refers to rtx_evflags.o(.text.osEventFlagsSet) for osEventFlagsSet
    main.o(.text.movingBuzzer) refers to rtx_delay.o(.text.osDelay) for osDelay
    main.o(.text.movingBuzzer) refers to rtx_evflags.o(.text.osEventFlagsWait) for osEventFlagsWait
    main.o(.text.movingBuzzer) refers to buzzer.o(.text.changeFrequency) for changeFrequency
    main.o(.text.movingBuzzer) refers to main.o(.bss.startSem) for startSem
    main.o(.text.movingBuzzer) refers to main.o(.bss.runningBuzzerFlag) for runningBuzzerFlag
    main.o(.ARM.exidx.text.movingBuzzer) refers to main.o(.text.movingBuzzer) for [Anonymous Symbol]
    main.o(.text.stopBuzzer) refers to rtx_semaphore.o(.text.osSemaphoreAcquire) for osSemaphoreAcquire
    main.o(.text.stopBuzzer) refers to buzzer.o(.text.endBuzzer) for endBuzzer
    main.o(.text.stopBuzzer) refers to main.o(.bss.endSem) for endSem
    main.o(.ARM.exidx.text.stopBuzzer) refers to main.o(.text.stopBuzzer) for [Anonymous Symbol]
    main.o(.text.main) refers to system_mkl25z4.o(.text.SystemCoreClockUpdate) for SystemCoreClockUpdate
    main.o(.text.main) refers to colorhandler.o(.text.initGPIOLED) for initGPIOLED
    main.o(.text.main) refers to uart.o(.text.InitUART1) for InitUART1
    main.o(.text.main) refers to pwm.o(.text.initPWM) for initPWM
    main.o(.text.main) refers to buzzer.o(.text.initBuzzerPWM) for initBuzzerPWM
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    main.o(.text.main) refers to rtx_semaphore.o(.text.osSemaphoreNew) for osSemaphoreNew
    main.o(.text.main) refers to rtx_evflags.o(.text.osEventFlagsNew) for osEventFlagsNew
    main.o(.text.main) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    main.o(.text.main) refers to rtx_thread.o(.text.osThreadSetPriority) for osThreadSetPriority
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelStart) for osKernelStart
    main.o(.text.main) refers to main.o(.bss.startSem) for startSem
    main.o(.text.main) refers to main.o(.bss.endSem) for endSem
    main.o(.text.main) refers to main.o(.bss.movingGreenFlag) for movingGreenFlag
    main.o(.text.main) refers to main.o(.bss.movingRedFlag) for movingRedFlag
    main.o(.text.main) refers to main.o(.bss.stationGreenFlag) for stationGreenFlag
    main.o(.text.main) refers to main.o(.bss.stationRedFlag) for stationRedFlag
    main.o(.text.main) refers to main.o(.bss.runningBuzzerFlag) for runningBuzzerFlag
    main.o(.text.main) refers to main.o(.text.UART_led_control) for UART_led_control
    main.o(.text.main) refers to main.o(.text.movingGreenLED) for movingGreenLED
    main.o(.text.main) refers to main.o(.text.movingRedLED) for movingRedLED
    main.o(.text.main) refers to main.o(.text.stationGreenLED) for stationGreenLED
    main.o(.text.main) refers to main.o(.text.stationRedLED) for stationRedLED
    main.o(.text.main) refers to main.o(.text.movingBuzzer) for movingBuzzer
    main.o(.text.main) refers to main.o(.text.stopBuzzer) for stopBuzzer
    main.o(.ARM.exidx.text.main) refers to main.o(.text.main) for [Anonymous Symbol]
    pwm.o(.ARM.exidx.text.initPWM) refers to pwm.o(.text.initPWM) for [Anonymous Symbol]
    pwm.o(.text.changeMotorFrequency) refers to idiv_div0.o(.text) for __aeabi_idiv
    pwm.o(.ARM.exidx.text.changeMotorFrequency) refers to pwm.o(.text.changeMotorFrequency) for [Anonymous Symbol]
    motor_control.o(.ARM.exidx.text.stopMotors) refers to motor_control.o(.text.stopMotors) for [Anonymous Symbol]
    motor_control.o(.ARM.exidx.text.moveForward) refers to motor_control.o(.text.moveForward) for [Anonymous Symbol]
    motor_control.o(.ARM.exidx.text.rotateLeft) refers to motor_control.o(.text.rotateLeft) for [Anonymous Symbol]
    motor_control.o(.ARM.exidx.text.rotateRight) refers to motor_control.o(.text.rotateRight) for [Anonymous Symbol]
    motor_control.o(.ARM.exidx.text.forwardLeft) refers to motor_control.o(.text.forwardLeft) for [Anonymous Symbol]
    motor_control.o(.ARM.exidx.text.forwardRight) refers to motor_control.o(.text.forwardRight) for [Anonymous Symbol]
    motor_control.o(.ARM.exidx.text.moveBackward) refers to motor_control.o(.text.moveBackward) for [Anonymous Symbol]
    colorhandler.o(.ARM.exidx.text.initGPIOLED) refers to colorhandler.o(.text.initGPIOLED) for [Anonymous Symbol]
    colorhandler.o(.text.startMovingGreen) refers to rtx_delay.o(.text.osDelay) for osDelay
    colorhandler.o(.ARM.exidx.text.startMovingGreen) refers to colorhandler.o(.text.startMovingGreen) for [Anonymous Symbol]
    colorhandler.o(.ARM.exidx.text.startStationGreen) refers to colorhandler.o(.text.startStationGreen) for [Anonymous Symbol]
    colorhandler.o(.text.startSlowFlashRed) refers to rtx_delay.o(.text.osDelay) for osDelay
    colorhandler.o(.ARM.exidx.text.startSlowFlashRed) refers to colorhandler.o(.text.startSlowFlashRed) for [Anonymous Symbol]
    colorhandler.o(.text.startFastFlashRed) refers to rtx_delay.o(.text.osDelay) for osDelay
    colorhandler.o(.ARM.exidx.text.startFastFlashRed) refers to colorhandler.o(.text.startFastFlashRed) for [Anonymous Symbol]
    buzzer.o(.ARM.exidx.text.initBuzzerPWM) refers to buzzer.o(.text.initBuzzerPWM) for [Anonymous Symbol]
    buzzer.o(.text.calculateModValue) refers to idiv_div0.o(.text) for __aeabi_idiv
    buzzer.o(.text.calculateModValue) refers to buzzer.o(.bss.modValue) for modValue
    buzzer.o(.ARM.exidx.text.calculateModValue) refers to buzzer.o(.text.calculateModValue) for [Anonymous Symbol]
    buzzer.o(.text.calculateCnvValue) refers to buzzer.o(.bss.modValue) for modValue
    buzzer.o(.text.calculateCnvValue) refers to buzzer.o(.bss.cnvValue) for cnvValue
    buzzer.o(.ARM.exidx.text.calculateCnvValue) refers to buzzer.o(.text.calculateCnvValue) for [Anonymous Symbol]
    buzzer.o(.text.changeFrequency) refers to idiv_div0.o(.text) for __aeabi_idiv
    buzzer.o(.text.changeFrequency) refers to buzzer.o(.bss.modValue) for modValue
    buzzer.o(.text.changeFrequency) refers to buzzer.o(.bss.cnvValue) for cnvValue
    buzzer.o(.ARM.exidx.text.changeFrequency) refers to buzzer.o(.text.changeFrequency) for [Anonymous Symbol]
    buzzer.o(.text.runningBuzzer) refers to rtx_delay.o(.text.osDelay) for osDelay
    buzzer.o(.text.runningBuzzer) refers to buzzer.o(.bss.modValue) for modValue
    buzzer.o(.text.runningBuzzer) refers to buzzer.o(.bss.cnvValue) for cnvValue
    buzzer.o(.ARM.exidx.text.runningBuzzer) refers to buzzer.o(.text.runningBuzzer) for [Anonymous Symbol]
    buzzer.o(.text.endBuzzer) refers to rtx_delay.o(.text.osDelay) for osDelay
    buzzer.o(.text.endBuzzer) refers to buzzer.o(.bss.modValue) for modValue
    buzzer.o(.text.endBuzzer) refers to buzzer.o(.bss.cnvValue) for cnvValue
    buzzer.o(.ARM.exidx.text.endBuzzer) refers to buzzer.o(.text.endBuzzer) for [Anonymous Symbol]
    uart.o(.text.InitUART1) refers to uidiv_div0.o(.text) for __aeabi_uidiv
    uart.o(.ARM.exidx.text.InitUART1) refers to uart.o(.text.InitUART1) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.mem) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.bss.os) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_idle_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_mq_attr) for [Anonymous Symbol]
    rtx_lib.o(.data.irqRtxLibRef) refers to irq_cm0.o(.constdata) for irqRtxLib
    rtx_config.o(.ARM.exidx.text.osRtxIdleThread) refers to rtx_config.o(.text.osRtxIdleThread) for [Anonymous Symbol]
    rtx_config.o(.ARM.exidx.text.osRtxErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for [Anonymous Symbol]
    startup_mkl25z4.o(RESET) refers to startup_mkl25z4.o(STACK) for __initial_sp
    startup_mkl25z4.o(RESET) refers to startup_mkl25z4.o(.text) for Reset_Handler
    startup_mkl25z4.o(RESET) refers to irq_cm0.o(.text) for SVC_Handler
    startup_mkl25z4.o(RESET) refers to main.o(.text.UART1_IRQHandler) for UART1_IRQHandler
    startup_mkl25z4.o(.text) refers to system_mkl25z4.o(.text.SystemInit) for SystemInit
    startup_mkl25z4.o(.text) refers to entry.o(.ARM.Collect$$$$00000000) for __main
    system_mkl25z4.o(.ARM.exidx.text.SystemInit) refers to system_mkl25z4.o(.text.SystemInit) for [Anonymous Symbol]
    system_mkl25z4.o(.text.SystemCoreClockUpdate) refers to uidiv_div0.o(.text) for __aeabi_uidiv
    system_mkl25z4.o(.text.SystemCoreClockUpdate) refers to system_mkl25z4.o(.data.SystemCoreClock) for SystemCoreClock
    system_mkl25z4.o(.ARM.exidx.text.SystemCoreClockUpdate) refers to system_mkl25z4.o(.text.SystemCoreClockUpdate) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for osRtxKernelPreInit
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for svcRtxKernelInitialize
    rtx_kernel.o(.ARM.exidx.text.osKernelInitialize) refers to rtx_kernel.o(.text.osKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for svcRtxKernelGetInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo) refers to rtx_kernel.o(.text.osKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.rodata.str1.4) for .L.str
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for svcRtxKernelGetState
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetState) refers to rtx_kernel.o(.text.osKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for svcRtxKernelStart
    rtx_kernel.o(.ARM.exidx.text.osKernelStart) refers to rtx_kernel.o(.text.osKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for svcRtxKernelLock
    rtx_kernel.o(.ARM.exidx.text.osKernelLock) refers to rtx_kernel.o(.text.osKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for svcRtxKernelUnlock
    rtx_kernel.o(.ARM.exidx.text.osKernelUnlock) refers to rtx_kernel.o(.text.osKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for svcRtxKernelRestoreLock
    rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.osKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for svcRtxKernelSuspend
    rtx_kernel.o(.ARM.exidx.text.osKernelSuspend) refers to rtx_kernel.o(.text.osKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for svcRtxKernelResume
    rtx_kernel.o(.ARM.exidx.text.osKernelResume) refers to rtx_kernel.o(.text.osKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for svcRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.osKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for svcRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.osKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for svcRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.osKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetCount) for OS_Tick_GetCount
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetOverflow) for OS_Tick_GetOverflow
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetInterval) for OS_Tick_GetInterval
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for svcRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.osKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_memory.o(.text.osRtxMemoryInit) for osRtxMemoryInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadStartup) for osRtxThreadStartup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Setup) for OS_Tick_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_GetIRQn) for OS_Tick_GetIRQn
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelStart) refers to irq_cm0.o(.text) for SysTick_Handler
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to os_systick.o(.text.OS_Tick_Disable) for OS_Tick_Disable
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelResume) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.data.os) refers to rtx_kernel.o(.rodata.str1.4) for .L.str
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListSort) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove) refers to rtx_thread.o(.text.osRtxThreadListRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStackCheck) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_thread.o(.text.osRtxThreadStackCheck) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadBlock) for osRtxThreadBlock
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadDispatch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadBlock) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_config.o(.text.osRtxIdleThread) for osRtxIdleThread
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_timer.o(.text.osRtxTimerThread) for osRtxTimerThread
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadStartup) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osThreadExit) for osThreadExit
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for osRtxThreadPostProcess
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.ARM.exidx.text.osThreadNew) refers to rtx_thread.o(.text.osThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for svcRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.osThreadGetName) refers to rtx_thread.o(.text.osThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for svcRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.osThreadGetId) refers to rtx_thread.o(.text.osThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for svcRtxThreadGetState
    rtx_thread.o(.ARM.exidx.text.osThreadGetState) refers to rtx_thread.o(.text.osThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for svcRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize) refers to rtx_thread.o(.text.osThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for svcRtxThreadGetStackSpace
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.osThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for svcRtxThreadSetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadSetPriority) refers to rtx_thread.o(.text.osThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for svcRtxThreadGetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadGetPriority) refers to rtx_thread.o(.text.osThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for svcRtxThreadYield
    rtx_thread.o(.ARM.exidx.text.osThreadYield) refers to rtx_thread.o(.text.osThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for svcRtxThreadSuspend
    rtx_thread.o(.ARM.exidx.text.osThreadSuspend) refers to rtx_thread.o(.text.osThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for svcRtxThreadResume
    rtx_thread.o(.ARM.exidx.text.osThreadResume) refers to rtx_thread.o(.text.osThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for svcRtxThreadDetach
    rtx_thread.o(.ARM.exidx.text.osThreadDetach) refers to rtx_thread.o(.text.osThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for svcRtxThreadJoin
    rtx_thread.o(.ARM.exidx.text.osThreadJoin) refers to rtx_thread.o(.text.osThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for svcRtxThreadExit
    rtx_thread.o(.ARM.exidx.text.osThreadExit) refers to rtx_thread.o(.text.osThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for svcRtxThreadTerminate
    rtx_thread.o(.ARM.exidx.text.osThreadTerminate) refers to rtx_thread.o(.text.osThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for svcRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.osThreadGetCount) refers to rtx_thread.o(.text.osThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for svcRtxThreadEnumerate
    rtx_thread.o(.ARM.exidx.text.osThreadEnumerate) refers to rtx_thread.o(.text.osThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for svcRtxThreadFlagsSet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet) refers to rtx_thread.o(.text.osThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for svcRtxThreadFlagsClear
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear) refers to rtx_thread.o(.text.osThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for svcRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet) refers to rtx_thread.o(.text.osThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for svcRtxThreadFlagsWait
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait) refers to rtx_thread.o(.text.osThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.ThreadFlagsCheck) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListUnlink) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadFree) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelay) refers to rtx_delay.o(.text.svcRtxDelay) for svcRtxDelay
    rtx_delay.o(.ARM.exidx.text.osDelay) refers to rtx_delay.o(.text.osDelay) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for svcRtxDelayUntil
    rtx_delay.o(.ARM.exidx.text.osDelayUntil) refers to rtx_delay.o(.text.osDelayUntil) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelay) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.ARM.exidx.text.svcRtxDelay) refers to rtx_delay.o(.text.svcRtxDelay) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsNew) refers to rtx_evflags.o(.text.svcRtxEventFlagsNew) for svcRtxEventFlagsNew
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsNew) refers to rtx_evflags.o(.text.osEventFlagsNew) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.svcRtxEventFlagsGetName) for svcRtxEventFlagsGetName
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.osEventFlagsGetName) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_evflags.o(.text.svcRtxEventFlagsSet) for svcRtxEventFlagsSet
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsSet) refers to rtx_evflags.o(.text.osEventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsClear) refers to rtx_evflags.o(.text.svcRtxEventFlagsClear) for svcRtxEventFlagsClear
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsClear) refers to rtx_evflags.o(.text.osEventFlagsClear) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsClear) refers to rtx_evflags.o(.text.svcRtxEventFlagsClear) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsGet) refers to rtx_evflags.o(.text.svcRtxEventFlagsGet) for svcRtxEventFlagsGet
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsGet) refers to rtx_evflags.o(.text.osEventFlagsGet) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGet) refers to rtx_evflags.o(.text.svcRtxEventFlagsGet) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.svcRtxEventFlagsWait) for svcRtxEventFlagsWait
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsWait) refers to rtx_evflags.o(.text.osEventFlagsWait) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.svcRtxEventFlagsDelete) for svcRtxEventFlagsDelete
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.osEventFlagsDelete) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.osRtxEventFlagsPostProcess) for osRtxEventFlagsPostProcess
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.svcRtxEventFlagsNew) for [Anonymous Symbol]
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsPostProcess) refers to rtx_evflags.o(.text.osRtxEventFlagsPostProcess) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.EventFlagsCheck) refers to rtx_evflags.o(.text.EventFlagsCheck) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGetName) refers to rtx_evflags.o(.text.svcRtxEventFlagsGetName) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.svcRtxEventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.svcRtxEventFlagsWait) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.svcRtxEventFlagsDelete) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.svcRtxSemaphoreNew) for svcRtxSemaphoreNew
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.osSemaphoreNew) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetName) for svcRtxSemaphoreGetName
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.osSemaphoreGetName) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) for svcRtxSemaphoreAcquire
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.osSemaphoreAcquire) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for SemaphoreTokenIncrement
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.svcRtxSemaphoreRelease) for svcRtxSemaphoreRelease
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.osSemaphoreRelease) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) for svcRtxSemaphoreGetCount
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.osSemaphoreGetCount) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetCount) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.svcRtxSemaphoreDelete) for svcRtxSemaphoreDelete
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.osSemaphoreDelete) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.osRtxSemaphorePostProcess) for osRtxSemaphorePostProcess
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.svcRtxSemaphoreNew) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphorePostProcess) refers to rtx_semaphore.o(.text.osRtxSemaphorePostProcess) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenDecrement) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetName) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetName) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenIncrement) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for SemaphoreTokenIncrement
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.svcRtxSemaphoreRelease) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.svcRtxSemaphoreDelete) for [Anonymous Symbol]
    irq_cm0.o(.text) refers to rtx_system.o(.text.osRtxPendSV_Handler) for osRtxPendSV_Handler
    irq_cm0.o(.text) refers to rtx_system.o(.text.osRtxTick_Handler) for osRtxTick_Handler
    irq_cm0.o(.text) refers to rtx_kernel.o(.data.os) for osRtxInfo
    irq_cm0.o(.text) refers to rtx_lib.o(.rodata.osRtxUserSVC) for osRtxUserSVC
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for osMessageQueueNew
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerTick) for osRtxTimerTick
    rtx_timer.o(.ARM.exidx.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerThread) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxTimerTick) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for svcRtxTimerNew
    rtx_timer.o(.ARM.exidx.text.osTimerNew) refers to rtx_timer.o(.text.osTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for svcRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.osTimerGetName) refers to rtx_timer.o(.text.osTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for svcRtxTimerStart
    rtx_timer.o(.ARM.exidx.text.osTimerStart) refers to rtx_timer.o(.text.osTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for svcRtxTimerStop
    rtx_timer.o(.ARM.exidx.text.osTimerStop) refers to rtx_timer.o(.text.osTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for svcRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.osTimerIsRunning) refers to rtx_timer.o(.text.osTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for svcRtxTimerDelete
    rtx_timer.o(.ARM.exidx.text.osTimerDelete) refers to rtx_timer.o(.text.osTimerDelete) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerInsert) refers to rtx_timer.o(.text.TimerInsert) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerRemove) refers to rtx_timer.o(.text.TimerRemove) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for svcRtxMutexNew
    rtx_mutex.o(.ARM.exidx.text.osMutexNew) refers to rtx_mutex.o(.text.osMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for svcRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.osMutexGetName) refers to rtx_mutex.o(.text.osMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for svcRtxMutexAcquire
    rtx_mutex.o(.ARM.exidx.text.osMutexAcquire) refers to rtx_mutex.o(.text.osMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for svcRtxMutexRelease
    rtx_mutex.o(.ARM.exidx.text.osMutexRelease) refers to rtx_mutex.o(.text.osMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for svcRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner) refers to rtx_mutex.o(.text.osMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for svcRtxMutexDelete
    rtx_mutex.o(.ARM.exidx.text.osMutexDelete) refers to rtx_mutex.o(.text.osMutexDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to memseta.o(.text) for __aeabi_memclr4
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit) refers to rtx_memory.o(.text.osRtxMemoryInit) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for svcRtxMemoryPoolNew
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.osMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for svcRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.osMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for svcRtxMemoryPoolAlloc
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for svcRtxMemoryPoolFree
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for svcRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for svcRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for svcRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.osMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for svcRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for svcRtxMemoryPoolDelete
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.osMemoryPoolDelete) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to memseta.o(.text) for __aeabi_memclr
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for osRtxMemoryPoolPostProcess
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxTick_Handler) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for OS_Tick_AcknowledgeIRQ
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxTick_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxPendSV_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPostProcess) refers to rtx_system.o(.text.osRtxPostProcess) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Setup) refers to uidiv_div0.o(.text) for __aeabi_uidiv
    os_systick.o(.text.OS_Tick_Setup) refers to system_mkl25z4.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.text.OS_Tick_Setup) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Setup) refers to os_systick.o(.text.OS_Tick_Setup) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Enable) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Enable) refers to os_systick.o(.text.OS_Tick_Enable) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Disable) refers to os_systick.o(.bss.PendST) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Disable) refers to os_systick.o(.text.OS_Tick_Disable) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn) refers to os_systick.o(.text.OS_Tick_GetIRQn) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_GetClock) refers to system_mkl25z4.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.ARM.exidx.text.OS_Tick_GetClock) refers to os_systick.o(.text.OS_Tick_GetClock) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval) refers to os_systick.o(.text.OS_Tick_GetInterval) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetCount) refers to os_systick.o(.text.OS_Tick_GetCount) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow) refers to os_systick.o(.text.OS_Tick_GetOverflow) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for svcRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.osMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for svcRtxMessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for svcRtxMessageQueueGet
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for svcRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for svcRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for svcRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for svcRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for svcRtxMessageQueueReset
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.osMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for svcRtxMessageQueueDelete
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.osMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to memseta.o(.text) for __aeabi_memclr
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for osRtxMessageQueuePostProcess
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to memcpya.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for [Anonymous Symbol]
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry10a.o(.ARM.Collect$$$$0000000D) for __rt_final_cpp
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry11a.o(.ARM.Collect$$$$0000000F) for __rt_final_exit
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry7b.o(.ARM.Collect$$$$00000008) for _main_clock
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry8b.o(.ARM.Collect$$$$0000000A) for _main_cpp_init
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry9a.o(.ARM.Collect$$$$0000000B) for _main_init
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry5.o(.ARM.Collect$$$$00000004) for _main_scatterload
    entry.o(.ARM.Collect$$$$00000000) refers (Special) to entry2.o(.ARM.Collect$$$$00000001) for _main_stk
    idiv.o(.text) refers to uidiv_div0.o(.text) for __aeabi_uidivmod
    entry2.o(.ARM.Collect$$$$00000001) refers to entry2.o(.ARM.Collect$$$$00002712) for __lit__00000000
    entry2.o(.ARM.Collect$$$$00002712) refers to startup_mkl25z4.o(STACK) for __initial_sp
    entry2.o(__vectab_stack_and_reset_area) refers to startup_mkl25z4.o(STACK) for __initial_sp
    entry2.o(__vectab_stack_and_reset_area) refers to entry.o(.ARM.Collect$$$$00000000) for __main
    entry5.o(.ARM.Collect$$$$00000004) refers to init.o(.text) for __scatterload
    entry9a.o(.ARM.Collect$$$$0000000B) refers to main.o(.text.main) for main
    entry9b.o(.ARM.Collect$$$$0000000C) refers to main.o(.text.main) for main
    idiv_div0.o(.text) refers to uidiv_div0.o(.text) for __aeabi_uidivmod
    init.o(.text) refers to entry5.o(.ARM.Collect$$$$00000004) for __main_after_scatterload


==============================================================================

Removing Unused input sections from the image.

    Removing main.o(.text), (0 bytes).
    Removing main.o(.text.motorMovingFlagsSet), (64 bytes).
    Removing main.o(.ARM.exidx.text.motorMovingFlagsSet), (8 bytes).
    Removing main.o(.text.motorStopFlagsSet), (64 bytes).
    Removing main.o(.ARM.exidx.text.motorStopFlagsSet), (8 bytes).
    Removing main.o(.ARM.exidx.text.UART1_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.UART_led_control), (8 bytes).
    Removing main.o(.ARM.exidx.text.movingGreenLED), (8 bytes).
    Removing main.o(.ARM.exidx.text.stationGreenLED), (8 bytes).
    Removing main.o(.ARM.exidx.text.movingRedLED), (8 bytes).
    Removing main.o(.ARM.exidx.text.stationRedLED), (8 bytes).
    Removing main.o(.ARM.exidx.text.movingBuzzer), (8 bytes).
    Removing main.o(.ARM.exidx.text.stopBuzzer), (8 bytes).
    Removing main.o(.ARM.exidx.text.main), (8 bytes).
    Removing main.o(.ARM.use_no_argv), (4 bytes).
    Removing pwm.o(.text), (0 bytes).
    Removing pwm.o(.ARM.exidx.text.initPWM), (8 bytes).
    Removing pwm.o(.text.changeMotorFrequency), (68 bytes).
    Removing pwm.o(.ARM.exidx.text.changeMotorFrequency), (8 bytes).
    Removing motor_control.o(.text), (0 bytes).
    Removing motor_control.o(.ARM.exidx.text.stopMotors), (8 bytes).
    Removing motor_control.o(.ARM.exidx.text.moveForward), (8 bytes).
    Removing motor_control.o(.ARM.exidx.text.rotateLeft), (8 bytes).
    Removing motor_control.o(.ARM.exidx.text.rotateRight), (8 bytes).
    Removing motor_control.o(.ARM.exidx.text.forwardLeft), (8 bytes).
    Removing motor_control.o(.ARM.exidx.text.forwardRight), (8 bytes).
    Removing motor_control.o(.ARM.exidx.text.moveBackward), (8 bytes).
    Removing colorhandler.o(.text), (0 bytes).
    Removing colorhandler.o(.ARM.exidx.text.initGPIOLED), (8 bytes).
    Removing colorhandler.o(.ARM.exidx.text.startMovingGreen), (8 bytes).
    Removing colorhandler.o(.ARM.exidx.text.startStationGreen), (8 bytes).
    Removing colorhandler.o(.ARM.exidx.text.startSlowFlashRed), (8 bytes).
    Removing colorhandler.o(.ARM.exidx.text.startFastFlashRed), (8 bytes).
    Removing buzzer.o(.text), (0 bytes).
    Removing buzzer.o(.ARM.exidx.text.initBuzzerPWM), (8 bytes).
    Removing buzzer.o(.text.calculateModValue), (24 bytes).
    Removing buzzer.o(.ARM.exidx.text.calculateModValue), (8 bytes).
    Removing buzzer.o(.text.calculateCnvValue), (28 bytes).
    Removing buzzer.o(.ARM.exidx.text.calculateCnvValue), (8 bytes).
    Removing buzzer.o(.ARM.exidx.text.changeFrequency), (8 bytes).
    Removing buzzer.o(.text.runningBuzzer), (456 bytes).
    Removing buzzer.o(.ARM.exidx.text.runningBuzzer), (8 bytes).
    Removing buzzer.o(.ARM.exidx.text.endBuzzer), (8 bytes).
    Removing uart.o(.text), (0 bytes).
    Removing uart.o(.ARM.exidx.text.InitUART1), (8 bytes).
    Removing rtx_lib.o(.text), (0 bytes).
    Removing rtx_lib.o(.data.irqRtxLibRef), (4 bytes).
    Removing rtx_config.o(.text), (0 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxIdleThread), (8 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxErrorNotify), (8 bytes).
    Removing startup_mkl25z4.o(HEAP), (0 bytes).
    Removing system_mkl25z4.o(.text), (0 bytes).
    Removing system_mkl25z4.o(.ARM.exidx.text.SystemInit), (8 bytes).
    Removing system_mkl25z4.o(.ARM.exidx.text.SystemCoreClockUpdate), (8 bytes).
    Removing rtx_kernel.o(.text), (0 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetInfo), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetInfo), (56 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetState), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetState), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelRestoreLock), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelSuspend), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelResume), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickCount), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickFreq), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickFreq), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerCount), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerFreq), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelRestoreLock), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelSuspend), (84 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelResume), (136 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume), (8 bytes).
    Removing rtx_thread.o(.text), (0 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetName), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetId), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetId), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetState), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSize), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSpace), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetPriority), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadYield), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspend), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResume), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.osThreadDetach), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osThreadJoin), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminate), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetCount), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.osThreadEnumerate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsSet), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsClear), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsGet), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsWait), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetName), (18 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetState), (24 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSize), (18 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSpace), (68 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetPriority), (28 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadYield), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspend), (136 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResume), (54 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadDetach), (58 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListUnlink), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadFree), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadJoin), (92 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminate), (188 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetCount), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadEnumerate), (96 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsSet), (108 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsClear), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsGet), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsWait), (80 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait), (8 bytes).
    Removing rtx_delay.o(.text), (0 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelay), (8 bytes).
    Removing rtx_delay.o(.text.osDelayUntil), (40 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelayUntil), (8 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelay), (8 bytes).
    Removing rtx_delay.o(.text.svcRtxDelayUntil), (32 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil), (8 bytes).
    Removing rtx_evflags.o(.text), (0 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsNew), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsGetName), (36 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsGetName), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsClear), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsClear), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsGet), (48 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsGet), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsGet), (18 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGet), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsWait), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsDelete), (40 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsDelete), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsNew), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsPostProcess), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.EventFlagsCheck), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsGetName), (18 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGetName), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsWait), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsDelete), (96 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsDelete), (8 bytes).
    Removing rtx_semaphore.o(.text), (0 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreNew), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreGetName), (36 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetName), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreAcquire), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreRelease), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreGetCount), (48 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetCount), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreGetCount), (18 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetCount), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreDelete), (40 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreDelete), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreNew), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphorePostProcess), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenDecrement), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreGetName), (18 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetName), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreAcquire), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenIncrement), (8 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreRelease), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreDelete), (96 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreDelete), (8 bytes).
    Removing irq_cm0.o(.constdata), (1 bytes).
    Removing rtx_timer.o(.text), (0 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerThread), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerTick), (8 bytes).
    Removing rtx_timer.o(.text.osTimerNew), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.osTimerGetName), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStart), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStop), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.osTimerIsRunning), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.osTimerDelete), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerDelete), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerInsert), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerNew), (132 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerGetName), (18 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStart), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.TimerRemove), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerRemove), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStop), (42 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerIsRunning), (24 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerDelete), (76 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete), (8 bytes).
    Removing rtx_mutex.o(.text), (0 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexNew), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetName), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexAcquire), (40 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexRelease), (40 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetOwner), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexDelete), (40 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexDelete), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexNew), (112 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetName), (18 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexAcquire), (152 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexRelease), (192 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetOwner), (24 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexDelete), (188 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete), (8 bytes).
    Removing rtx_memory.o(.text), (0 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree), (8 bytes).
    Removing rtx_mempool.o(.text), (0 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolNew), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetName), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolAlloc), (56 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCapacity), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetBlockSize), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCount), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCount), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetSpace), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace), (22 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolDelete), (40 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolNew), (444 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), (40 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetName), (18 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), (64 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolDelete), (112 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_system.o(.text), (0 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxTick_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPostProcess), (8 bytes).
    Removing os_systick.o(.text), (0 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Setup), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Enable), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Disable), (40 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Disable), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetClock), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetClock), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetInterval), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetCount), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetCount), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetOverflow), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow), (8 bytes).
    Removing rtx_msgqueue.o(.text), (0 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetName), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCapacity), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetMsgSize), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCount), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetSpace), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace), (22 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueReset), (40 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueDelete), (40 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetName), (18 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueReset), (162 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueDelete), (112 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete), (8 bytes).

417 unused section(s) (total 9689 bytes) removed from the image.

==============================================================================

Image Symbol Table

    Local Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    ../clib/division.s                       0x00000000   Number         0  aeabi_sdivfast.o ABSOLUTE
    ../clib/division.s                       0x00000000   Number         0  aeabi_sdivfast_div0.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  uidiv.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  idiv.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  uidiv_div0.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  idiv_div0.o ABSOLUTE
    ../clib/microlib/division.c              0x00000000   Number         0  idiv0.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry2.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry5.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry7a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry7b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry8a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry8b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry9a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry9b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry10a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry10b.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry11a.o ABSOLUTE
    ../clib/microlib/init/entry.s            0x00000000   Number         0  entry11b.o ABSOLUTE
    ../clib/microlib/string/memcpy.c         0x00000000   Number         0  memcpya.o ABSOLUTE
    ../clib/microlib/string/memcpy.c         0x00000000   Number         0  memcpyb.o ABSOLUTE
    ../clib/microlib/string/memset.c         0x00000000   Number         0  memseta.o ABSOLUTE
    ..\..\..\Source\ARM\irq_cm0.s            0x00000000   Number         0  irq_cm0.o ABSOLUTE
    RTE/Device/MKL25Z128xxx4/startup_MKL25Z4.s 0x00000000   Number         0  startup_mkl25z4.o ABSOLUTE
    RTX_Config.c                             0x00000000   Number         0  rtx_config.o ABSOLUTE
    buzzer.c                                 0x00000000   Number         0  buzzer.o ABSOLUTE
    colorHandler.c                           0x00000000   Number         0  colorhandler.o ABSOLUTE
    dc.s                                     0x00000000   Number         0  dc.o ABSOLUTE
    handlers.s                               0x00000000   Number         0  handlers.o ABSOLUTE
    init.s                                   0x00000000   Number         0  init.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    motor_control.c                          0x00000000   Number         0  motor_control.o ABSOLUTE
    os_systick.c                             0x00000000   Number         0  os_systick.o ABSOLUTE
    pwm.c                                    0x00000000   Number         0  pwm.o ABSOLUTE
    rtx_delay.c                              0x00000000   Number         0  rtx_delay.o ABSOLUTE
    rtx_evflags.c                            0x00000000   Number         0  rtx_evflags.o ABSOLUTE
    rtx_kernel.c                             0x00000000   Number         0  rtx_kernel.o ABSOLUTE
    rtx_lib.c                                0x00000000   Number         0  rtx_lib.o ABSOLUTE
    rtx_memory.c                             0x00000000   Number         0  rtx_memory.o ABSOLUTE
    rtx_mempool.c                            0x00000000   Number         0  rtx_mempool.o ABSOLUTE
    rtx_msgqueue.c                           0x00000000   Number         0  rtx_msgqueue.o ABSOLUTE
    rtx_mutex.c                              0x00000000   Number         0  rtx_mutex.o ABSOLUTE
    rtx_semaphore.c                          0x00000000   Number         0  rtx_semaphore.o ABSOLUTE
    rtx_system.c                             0x00000000   Number         0  rtx_system.o ABSOLUTE
    rtx_thread.c                             0x00000000   Number         0  rtx_thread.o ABSOLUTE
    rtx_timer.c                              0x00000000   Number         0  rtx_timer.o ABSOLUTE
    system_MKL25Z4.c                         0x00000000   Number         0  system_mkl25z4.o ABSOLUTE
    uart.c                                   0x00000000   Number         0  uart.o ABSOLUTE
    RESET                                    0x00000000   Section      192  startup_mkl25z4.o(RESET)
    .ARM.Collect$$$$00000000                 0x000000c0   Section        0  entry.o(.ARM.Collect$$$$00000000)
    .ARM.Collect$$$$00000001                 0x000000c0   Section        4  entry2.o(.ARM.Collect$$$$00000001)
    .ARM.Collect$$$$00000004                 0x000000c4   Section        4  entry5.o(.ARM.Collect$$$$00000004)
    .ARM.Collect$$$$00000008                 0x000000c8   Section        0  entry7b.o(.ARM.Collect$$$$00000008)
    .ARM.Collect$$$$0000000A                 0x000000c8   Section        0  entry8b.o(.ARM.Collect$$$$0000000A)
    .ARM.Collect$$$$0000000B                 0x000000c8   Section        8  entry9a.o(.ARM.Collect$$$$0000000B)
    __lit__00000000                          0x000000d0   Data           4  entry2.o(.ARM.Collect$$$$00002712)
    .ARM.Collect$$$$0000000D                 0x000000d0   Section        0  entry10a.o(.ARM.Collect$$$$0000000D)
    .ARM.Collect$$$$0000000F                 0x000000d0   Section        0  entry11a.o(.ARM.Collect$$$$0000000F)
    .ARM.Collect$$$$00002712                 0x000000d0   Section        4  entry2.o(.ARM.Collect$$$$00002712)
    .text                                    0x000000d4   Section       40  startup_mkl25z4.o(.text)
    .text                                    0x000000fc   Section      164  irq_cm0.o(.text)
    .text                                    0x000001a0   Section        0  memcpya.o(.text)
    .text                                    0x000001c4   Section        0  memseta.o(.text)
    .text                                    0x000001e8   Section        0  uidiv_div0.o(.text)
    .text                                    0x00000228   Section        0  idiv_div0.o(.text)
    .text                                    0x00000278   Section       36  init.o(.text)
    EventFlagsCheck                          0x0000029d   Thumb Code    78  rtx_evflags.o(.text.EventFlagsCheck)
    [Anonymous Symbol]                       0x0000029c   Section        0  rtx_evflags.o(.text.EventFlagsCheck)
    [Anonymous Symbol]                       0x000002ec   Section        0  uart.o(.text.InitUART1)
    __arm_cp.0_0                             0x00000360   Number         4  uart.o(.text.InitUART1)
    __arm_cp.0_1                             0x00000364   Number         4  uart.o(.text.InitUART1)
    __arm_cp.0_2                             0x00000368   Number         4  uart.o(.text.InitUART1)
    __arm_cp.0_3                             0x0000036c   Number         4  uart.o(.text.InitUART1)
    __arm_cp.0_4                             0x00000370   Number         4  uart.o(.text.InitUART1)
    __arm_cp.0_5                             0x00000374   Number         4  uart.o(.text.InitUART1)
    __arm_cp.0_6                             0x00000378   Number         4  uart.o(.text.InitUART1)
    MessageQueueGet                          0x0000037d   Thumb Code    76  rtx_msgqueue.o(.text.MessageQueueGet)
    [Anonymous Symbol]                       0x0000037c   Section        0  rtx_msgqueue.o(.text.MessageQueueGet)
    MessageQueueRemove                       0x000003c9   Thumb Code    30  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x000003c8   Section        0  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x000003e8   Section        0  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    [Anonymous Symbol]                       0x000003f0   Section        0  os_systick.o(.text.OS_Tick_GetIRQn)
    [Anonymous Symbol]                       0x000003f6   Section        0  rtx_config.o(.text.osRtxErrorNotify)
    [Anonymous Symbol]                       0x000003f8   Section        0  rtx_config.o(.text.osRtxIdleThread)
    [Anonymous Symbol]                       0x000003fa   Section        0  rtx_kernel.o(.text.osRtxKernelPreInit)
    i.__scatterload_null                     0x000003fc   Section        2  handlers.o(i.__scatterload_null)
    .ARM.__at_0x400                          0x00000400   Section       16  startup_mkl25z4.o(.ARM.__at_0x400)
    MessageQueuePut                          0x00000411   Thumb Code    98  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x00000410   Section        0  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x00000474   Section        0  os_systick.o(.text.OS_Tick_Enable)
    __arm_cp.1_1                             0x00000494   Number         4  os_systick.o(.text.OS_Tick_Enable)
    [Anonymous Symbol]                       0x00000498   Section        0  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_1                             0x000004d4   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_2                             0x000004d8   Number         4  os_systick.o(.text.OS_Tick_Setup)
    __arm_cp.0_3                             0x000004dc   Number         4  os_systick.o(.text.OS_Tick_Setup)
    SemaphoreTokenDecrement                  0x000004e1   Thumb Code    36  rtx_semaphore.o(.text.SemaphoreTokenDecrement)
    [Anonymous Symbol]                       0x000004e0   Section        0  rtx_semaphore.o(.text.SemaphoreTokenDecrement)
    SemaphoreTokenIncrement                  0x00000505   Thumb Code    38  rtx_semaphore.o(.text.SemaphoreTokenIncrement)
    [Anonymous Symbol]                       0x00000504   Section        0  rtx_semaphore.o(.text.SemaphoreTokenIncrement)
    [Anonymous Symbol]                       0x0000052c   Section        0  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_0                             0x0000061c   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_1                             0x00000620   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_2                             0x00000624   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_3                             0x00000628   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_4                             0x0000062c   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_5                             0x00000630   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    __arm_cp.1_6                             0x00000634   Number         4  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    [Anonymous Symbol]                       0x00000638   Section        0  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_0                             0x000006f4   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_1                             0x000006f8   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_2                             0x000006fc   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_3                             0x00000700   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_4                             0x00000704   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_5                             0x00000708   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_6                             0x0000070c   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_7                             0x00000710   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_8                             0x00000714   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_9                             0x00000718   Number         4  system_mkl25z4.o(.text.SystemInit)
    __arm_cp.0_10                            0x0000071c   Number         4  system_mkl25z4.o(.text.SystemInit)
    ThreadFlagsCheck                         0x00000721   Thumb Code    78  rtx_thread.o(.text.ThreadFlagsCheck)
    [Anonymous Symbol]                       0x00000720   Section        0  rtx_thread.o(.text.ThreadFlagsCheck)
    TimerInsert                              0x00000771   Thumb Code    76  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x00000770   Section        0  rtx_timer.o(.text.TimerInsert)
    __arm_cp.8_0                             0x000007b8   Number         4  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x000007bc   Section        0  main.o(.text.UART1_IRQHandler)
    __arm_cp.2_0                             0x000007d4   Number         4  main.o(.text.UART1_IRQHandler)
    __arm_cp.2_1                             0x000007d8   Number         4  main.o(.text.UART1_IRQHandler)
    [Anonymous Symbol]                       0x000007dc   Section        0  main.o(.text.UART_led_control)
    __arm_cp.3_0                             0x00000890   Number         4  main.o(.text.UART_led_control)
    __arm_cp.3_1                             0x00000894   Number         4  main.o(.text.UART_led_control)
    __arm_cp.3_2                             0x00000898   Number         4  main.o(.text.UART_led_control)
    __arm_cp.3_3                             0x0000089c   Number         4  main.o(.text.UART_led_control)
    __arm_cp.3_4                             0x000008a0   Number         4  main.o(.text.UART_led_control)
    __arm_cp.3_5                             0x000008a4   Number         4  main.o(.text.UART_led_control)
    __arm_cp.3_6                             0x000008a8   Number         4  main.o(.text.UART_led_control)
    __arm_cp.3_7                             0x000008ac   Number         4  main.o(.text.UART_led_control)
    [Anonymous Symbol]                       0x000008b0   Section        0  buzzer.o(.text.changeFrequency)
    __arm_cp.3_0                             0x000008d8   Number         4  buzzer.o(.text.changeFrequency)
    __arm_cp.3_3                             0x000008dc   Number         4  buzzer.o(.text.changeFrequency)
    [Anonymous Symbol]                       0x000008e0   Section        0  buzzer.o(.text.endBuzzer)
    __arm_cp.5_0                             0x00000a94   Number         4  buzzer.o(.text.endBuzzer)
    __arm_cp.5_1                             0x00000a98   Number         4  buzzer.o(.text.endBuzzer)
    __arm_cp.5_2                             0x00000a9c   Number         4  buzzer.o(.text.endBuzzer)
    __arm_cp.5_3                             0x00000aa0   Number         4  buzzer.o(.text.endBuzzer)
    [Anonymous Symbol]                       0x00000aa4   Section        0  motor_control.o(.text.forwardLeft)
    [Anonymous Symbol]                       0x00000ab8   Section        0  motor_control.o(.text.forwardRight)
    [Anonymous Symbol]                       0x00000acc   Section        0  buzzer.o(.text.initBuzzerPWM)
    __arm_cp.0_1                             0x00000b38   Number         4  buzzer.o(.text.initBuzzerPWM)
    __arm_cp.0_2                             0x00000b3c   Number         4  buzzer.o(.text.initBuzzerPWM)
    [Anonymous Symbol]                       0x00000b40   Section        0  colorhandler.o(.text.initGPIOLED)
    __arm_cp.0_0                             0x00000c2c   Number         4  colorhandler.o(.text.initGPIOLED)
    __arm_cp.0_1                             0x00000c30   Number         4  colorhandler.o(.text.initGPIOLED)
    __arm_cp.0_3                             0x00000c34   Number         4  colorhandler.o(.text.initGPIOLED)
    __arm_cp.0_4                             0x00000c38   Number         4  colorhandler.o(.text.initGPIOLED)
    __arm_cp.0_5                             0x00000c3c   Number         4  colorhandler.o(.text.initGPIOLED)
    [Anonymous Symbol]                       0x00000c40   Section        0  pwm.o(.text.initPWM)
    __arm_cp.0_0                             0x00000cfc   Number         4  pwm.o(.text.initPWM)
    __arm_cp.0_1                             0x00000d00   Number         4  pwm.o(.text.initPWM)
    __arm_cp.0_2                             0x00000d04   Number         4  pwm.o(.text.initPWM)
    __arm_cp.0_3                             0x00000d08   Number         4  pwm.o(.text.initPWM)
    __arm_cp.0_4                             0x00000d0c   Number         4  pwm.o(.text.initPWM)
    [Anonymous Symbol]                       0x00000d10   Section        0  main.o(.text.main)
    __arm_cp.10_1                            0x00000e0c   Number         4  main.o(.text.main)
    __arm_cp.10_4                            0x00000e10   Number         4  main.o(.text.main)
    __arm_cp.10_5                            0x00000e14   Number         4  main.o(.text.main)
    __arm_cp.10_7                            0x00000e18   Number         4  main.o(.text.main)
    __arm_cp.10_8                            0x00000e1c   Number         4  main.o(.text.main)
    __arm_cp.10_9                            0x00000e20   Number         4  main.o(.text.main)
    __arm_cp.10_10                           0x00000e24   Number         4  main.o(.text.main)
    __arm_cp.10_11                           0x00000e28   Number         4  main.o(.text.main)
    __arm_cp.10_12                           0x00000e2c   Number         4  main.o(.text.main)
    __arm_cp.10_13                           0x00000e30   Number         4  main.o(.text.main)
    [Anonymous Symbol]                       0x00000e34   Section        0  motor_control.o(.text.moveBackward)
    __arm_cp.6_1                             0x00000e44   Number         4  motor_control.o(.text.moveBackward)
    [Anonymous Symbol]                       0x00000e48   Section        0  motor_control.o(.text.moveForward)
    __arm_cp.1_0                             0x00000e58   Number         4  motor_control.o(.text.moveForward)
    __arm_cp.1_1                             0x00000e5c   Number         4  motor_control.o(.text.moveForward)
    [Anonymous Symbol]                       0x00000e60   Section        0  main.o(.text.movingBuzzer)
    __arm_cp.8_0                             0x00001014   Number         4  main.o(.text.movingBuzzer)
    __arm_cp.8_1                             0x00001018   Number         4  main.o(.text.movingBuzzer)
    [Anonymous Symbol]                       0x0000101c   Section        0  main.o(.text.movingGreenLED)
    __arm_cp.4_0                             0x00001034   Number         4  main.o(.text.movingGreenLED)
    [Anonymous Symbol]                       0x00001038   Section        0  main.o(.text.movingRedLED)
    __arm_cp.6_0                             0x00001050   Number         4  main.o(.text.movingRedLED)
    [Anonymous Symbol]                       0x00001054   Section        0  rtx_delay.o(.text.osDelay)
    __arm_cp.0_0                             0x00001078   Number         4  rtx_delay.o(.text.osDelay)
    [Anonymous Symbol]                       0x0000107c   Section        0  rtx_evflags.o(.text.osEventFlagsClear)
    __arm_cp.3_0                             0x0000109c   Number         4  rtx_evflags.o(.text.osEventFlagsClear)
    [Anonymous Symbol]                       0x000010a0   Section        0  rtx_evflags.o(.text.osEventFlagsNew)
    __arm_cp.0_0                             0x000010c0   Number         4  rtx_evflags.o(.text.osEventFlagsNew)
    [Anonymous Symbol]                       0x000010c4   Section        0  rtx_evflags.o(.text.osEventFlagsSet)
    __arm_cp.2_0                             0x00001110   Number         4  rtx_evflags.o(.text.osEventFlagsSet)
    [Anonymous Symbol]                       0x00001114   Section        0  rtx_evflags.o(.text.osEventFlagsWait)
    __arm_cp.7_0                             0x00001154   Number         4  rtx_evflags.o(.text.osEventFlagsWait)
    [Anonymous Symbol]                       0x00001158   Section        0  rtx_kernel.o(.text.osKernelInitialize)
    __arm_cp.1_0                             0x0000117c   Number         4  rtx_kernel.o(.text.osKernelInitialize)
    [Anonymous Symbol]                       0x00001180   Section        0  rtx_kernel.o(.text.osKernelStart)
    __arm_cp.6_0                             0x000011a0   Number         4  rtx_kernel.o(.text.osKernelStart)
    [Anonymous Symbol]                       0x000011a4   Section        0  rtx_msgqueue.o(.text.osMessageQueueGet)
    __arm_cp.3_0                             0x00001214   Number         4  rtx_msgqueue.o(.text.osMessageQueueGet)
    [Anonymous Symbol]                       0x00001218   Section        0  rtx_msgqueue.o(.text.osMessageQueueNew)
    __arm_cp.0_0                             0x00001238   Number         4  rtx_msgqueue.o(.text.osMessageQueueNew)
    [Anonymous Symbol]                       0x0000123c   Section        0  rtx_msgqueue.o(.text.osMessageQueuePut)
    __arm_cp.2_0                             0x000012b0   Number         4  rtx_msgqueue.o(.text.osMessageQueuePut)
    osRtxEventFlagsPostProcess               0x000012b5   Thumb Code    52  rtx_evflags.o(.text.osRtxEventFlagsPostProcess)
    [Anonymous Symbol]                       0x000012b4   Section        0  rtx_evflags.o(.text.osRtxEventFlagsPostProcess)
    [Anonymous Symbol]                       0x000012e8   Section        0  rtx_memory.o(.text.osRtxMemoryAlloc)
    [Anonymous Symbol]                       0x00001364   Section        0  rtx_memory.o(.text.osRtxMemoryFree)
    [Anonymous Symbol]                       0x000013b2   Section        0  rtx_memory.o(.text.osRtxMemoryInit)
    [Anonymous Symbol]                       0x000013e4   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    [Anonymous Symbol]                       0x00001412   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    [Anonymous Symbol]                       0x0000144c   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueuePostProcess             0x0000148b   Thumb Code   188  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x0000148a   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x00001546   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    [Anonymous Symbol]                       0x0000158c   Section        0  rtx_system.o(.text.osRtxPendSV_Handler)
    [Anonymous Symbol]                       0x00001608   Section        0  rtx_system.o(.text.osRtxPostProcess)
    __arm_cp.2_1                             0x0000166c   Number         4  rtx_system.o(.text.osRtxPostProcess)
    osRtxSemaphorePostProcess                0x00001671   Thumb Code    36  rtx_semaphore.o(.text.osRtxSemaphorePostProcess)
    [Anonymous Symbol]                       0x00001670   Section        0  rtx_semaphore.o(.text.osRtxSemaphorePostProcess)
    osRtxThreadBlock                         0x00001695   Thumb Code    52  rtx_thread.o(.text.osRtxThreadBlock)
    [Anonymous Symbol]                       0x00001694   Section        0  rtx_thread.o(.text.osRtxThreadBlock)
    osRtxThreadDelayInsert                   0x000016c9   Thumb Code   124  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x000016c8   Section        0  rtx_thread.o(.text.osRtxThreadDelayInsert)
    osRtxThreadDelayRemove                   0x00001745   Thumb Code    64  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x00001744   Section        0  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x00001784   Section        0  rtx_thread.o(.text.osRtxThreadDelayTick)
    [Anonymous Symbol]                       0x000017b8   Section        0  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadFree                          0x00001805   Thumb Code    80  rtx_thread.o(.text.osRtxThreadFree)
    [Anonymous Symbol]                       0x00001804   Section        0  rtx_thread.o(.text.osRtxThreadFree)
    [Anonymous Symbol]                       0x00001854   Section        0  rtx_thread.o(.text.osRtxThreadListGet)
    [Anonymous Symbol]                       0x00001868   Section        0  rtx_thread.o(.text.osRtxThreadListPut)
    [Anonymous Symbol]                       0x00001894   Section        0  rtx_thread.o(.text.osRtxThreadListRemove)
    [Anonymous Symbol]                       0x000018ac   Section        0  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadPostProcess                   0x000018d3   Thumb Code    38  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x000018d2   Section        0  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x000018f8   Section        0  rtx_thread.o(.text.osRtxThreadReadyPut)
    [Anonymous Symbol]                       0x0000190c   Section        0  rtx_thread.o(.text.osRtxThreadRegPtr)
    [Anonymous Symbol]                       0x00001914   Section        0  rtx_thread.o(.text.osRtxThreadStackCheck)
    __arm_cp.8_0                             0x00001938   Number         4  rtx_thread.o(.text.osRtxThreadStackCheck)
    __arm_cp.8_1                             0x0000193c   Number         4  rtx_thread.o(.text.osRtxThreadStackCheck)
    [Anonymous Symbol]                       0x00001940   Section        0  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_1                            0x00001970   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    __arm_cp.15_3                            0x00001974   Number         4  rtx_thread.o(.text.osRtxThreadStartup)
    [Anonymous Symbol]                       0x00001978   Section        0  rtx_thread.o(.text.osRtxThreadSwitch)
    [Anonymous Symbol]                       0x00001988   Section        0  rtx_thread.o(.text.osRtxThreadWaitEnter)
    __arm_cp.13_0                            0x000019c0   Number         4  rtx_thread.o(.text.osRtxThreadWaitEnter)
    [Anonymous Symbol]                       0x000019c4   Section        0  rtx_thread.o(.text.osRtxThreadWaitExit)
    [Anonymous Symbol]                       0x000019e8   Section        0  rtx_system.o(.text.osRtxTick_Handler)
    __arm_cp.0_0                             0x00001a58   Number         4  rtx_system.o(.text.osRtxTick_Handler)
    [Anonymous Symbol]                       0x00001a5c   Section        0  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_0                             0x00001a8c   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_1                             0x00001a90   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    __arm_cp.0_2                             0x00001a94   Number         4  rtx_timer.o(.text.osRtxTimerThread)
    osRtxTimerTick                           0x00001a99   Thumb Code    96  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x00001a98   Section        0  rtx_timer.o(.text.osRtxTimerTick)
    __arm_cp.1_0                             0x00001af4   Number         4  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x00001af8   Section        0  rtx_semaphore.o(.text.osSemaphoreAcquire)
    __arm_cp.2_0                             0x00001b38   Number         4  rtx_semaphore.o(.text.osSemaphoreAcquire)
    [Anonymous Symbol]                       0x00001b3c   Section        0  rtx_semaphore.o(.text.osSemaphoreNew)
    __arm_cp.0_0                             0x00001b5c   Number         4  rtx_semaphore.o(.text.osSemaphoreNew)
    [Anonymous Symbol]                       0x00001b60   Section        0  rtx_semaphore.o(.text.osSemaphoreRelease)
    __arm_cp.3_0                             0x00001ba8   Number         4  rtx_semaphore.o(.text.osSemaphoreRelease)
    [Anonymous Symbol]                       0x00001bac   Section        0  rtx_thread.o(.text.osThreadExit)
    __arm_cp.31_0                            0x00001bb4   Number         4  rtx_thread.o(.text.osThreadExit)
    [Anonymous Symbol]                       0x00001bb8   Section        0  rtx_thread.o(.text.osThreadNew)
    __arm_cp.17_0                            0x00001bd8   Number         4  rtx_thread.o(.text.osThreadNew)
    [Anonymous Symbol]                       0x00001bdc   Section        0  rtx_thread.o(.text.osThreadSetPriority)
    __arm_cp.24_0                            0x00001c00   Number         4  rtx_thread.o(.text.osThreadSetPriority)
    [Anonymous Symbol]                       0x00001c04   Section        0  motor_control.o(.text.rotateLeft)
    [Anonymous Symbol]                       0x00001c14   Section        0  motor_control.o(.text.rotateRight)
    __arm_cp.3_1                             0x00001c24   Number         4  motor_control.o(.text.rotateRight)
    [Anonymous Symbol]                       0x00001c28   Section        0  colorhandler.o(.text.startFastFlashRed)
    [Anonymous Symbol]                       0x00001c4c   Section        0  colorhandler.o(.text.startMovingGreen)
    [Anonymous Symbol]                       0x00001ca4   Section        0  colorhandler.o(.text.startSlowFlashRed)
    __arm_cp.3_0                             0x00001ccc   Number         4  colorhandler.o(.text.startSlowFlashRed)
    __arm_cp.3_1                             0x00001cd0   Number         4  colorhandler.o(.text.startSlowFlashRed)
    __arm_cp.3_2                             0x00001cd4   Number         4  colorhandler.o(.text.startSlowFlashRed)
    [Anonymous Symbol]                       0x00001cd8   Section        0  colorhandler.o(.text.startStationGreen)
    __arm_cp.2_0                             0x00001ce4   Number         4  colorhandler.o(.text.startStationGreen)
    [Anonymous Symbol]                       0x00001ce8   Section        0  main.o(.text.stationGreenLED)
    __arm_cp.5_0                             0x00001d00   Number         4  main.o(.text.stationGreenLED)
    [Anonymous Symbol]                       0x00001d04   Section        0  main.o(.text.stationRedLED)
    __arm_cp.7_0                             0x00001d1c   Number         4  main.o(.text.stationRedLED)
    [Anonymous Symbol]                       0x00001d20   Section        0  main.o(.text.stopBuzzer)
    __arm_cp.9_0                             0x00001d34   Number         4  main.o(.text.stopBuzzer)
    [Anonymous Symbol]                       0x00001d38   Section        0  motor_control.o(.text.stopMotors)
    __arm_cp.0_0                             0x00001d48   Number         4  motor_control.o(.text.stopMotors)
    svcRtxDelay                              0x00001d4d   Thumb Code    18  rtx_delay.o(.text.svcRtxDelay)
    [Anonymous Symbol]                       0x00001d4c   Section        0  rtx_delay.o(.text.svcRtxDelay)
    svcRtxEventFlagsClear                    0x00001d5f   Thumb Code    50  rtx_evflags.o(.text.svcRtxEventFlagsClear)
    [Anonymous Symbol]                       0x00001d5e   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsClear)
    svcRtxEventFlagsNew                      0x00001d91   Thumb Code   116  rtx_evflags.o(.text.svcRtxEventFlagsNew)
    [Anonymous Symbol]                       0x00001d90   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsNew)
    __arm_cp.9_0                             0x00001dfc   Number         4  rtx_evflags.o(.text.svcRtxEventFlagsNew)
    __arm_cp.9_1                             0x00001e00   Number         4  rtx_evflags.o(.text.svcRtxEventFlagsNew)
    svcRtxEventFlagsSet                      0x00001e05   Thumb Code   124  rtx_evflags.o(.text.svcRtxEventFlagsSet)
    [Anonymous Symbol]                       0x00001e04   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsSet)
    svcRtxEventFlagsWait                     0x00001e81   Thumb Code    96  rtx_evflags.o(.text.svcRtxEventFlagsWait)
    [Anonymous Symbol]                       0x00001e80   Section        0  rtx_evflags.o(.text.svcRtxEventFlagsWait)
    svcRtxKernelInitialize                   0x00001ee1   Thumb Code   320  rtx_kernel.o(.text.svcRtxKernelInitialize)
    [Anonymous Symbol]                       0x00001ee0   Section        0  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.20_2                            0x0000201c   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    svcRtxKernelStart                        0x00002021   Thumb Code   128  rtx_kernel.o(.text.svcRtxKernelStart)
    [Anonymous Symbol]                       0x00002020   Section        0  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_1                            0x00002094   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_2                            0x00002098   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    __arm_cp.21_3                            0x0000209c   Number         4  rtx_kernel.o(.text.svcRtxKernelStart)
    svcRtxMessageQueueGet                    0x000020a1   Thumb Code   232  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    [Anonymous Symbol]                       0x000020a0   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    __arm_cp.21_0                            0x00002184   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    svcRtxMessageQueueNew                    0x00002189   Thumb Code   484  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    [Anonymous Symbol]                       0x00002188   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_0                            0x00002354   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_1                            0x00002358   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_2                            0x0000235c   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_3                            0x00002360   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_4                            0x00002364   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.14_5                            0x00002368   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    svcRtxMessageQueuePut                    0x0000236d   Thumb Code   184  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    [Anonymous Symbol]                       0x0000236c   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    svcRtxSemaphoreAcquire                   0x00002425   Thumb Code    72  rtx_semaphore.o(.text.svcRtxSemaphoreAcquire)
    [Anonymous Symbol]                       0x00002424   Section        0  rtx_semaphore.o(.text.svcRtxSemaphoreAcquire)
    svcRtxSemaphoreNew                       0x0000246d   Thumb Code   136  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    [Anonymous Symbol]                       0x0000246c   Section        0  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    __arm_cp.7_0                             0x000024e8   Number         4  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    __arm_cp.7_1                             0x000024ec   Number         4  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    __arm_cp.7_2                             0x000024f0   Number         4  rtx_semaphore.o(.text.svcRtxSemaphoreNew)
    svcRtxSemaphoreRelease                   0x000024f5   Thumb Code    56  rtx_semaphore.o(.text.svcRtxSemaphoreRelease)
    [Anonymous Symbol]                       0x000024f4   Section        0  rtx_semaphore.o(.text.svcRtxSemaphoreRelease)
    svcRtxThreadExit                         0x0000252d   Thumb Code   108  rtx_thread.o(.text.svcRtxThreadExit)
    [Anonymous Symbol]                       0x0000252c   Section        0  rtx_thread.o(.text.svcRtxThreadExit)
    __arm_cp.54_0                            0x00002594   Number         4  rtx_thread.o(.text.svcRtxThreadExit)
    svcRtxThreadNew                          0x00002599   Thumb Code   492  rtx_thread.o(.text.svcRtxThreadNew)
    [Anonymous Symbol]                       0x00002598   Section        0  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_0                            0x0000276c   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_1                            0x00002770   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_2                            0x00002774   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_3                            0x00002778   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_4                            0x0000277c   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    __arm_cp.16_5                            0x00002780   Number         4  rtx_thread.o(.text.svcRtxThreadNew)
    svcRtxThreadSetPriority                  0x00002785   Thumb Code    72  rtx_thread.o(.text.svcRtxThreadSetPriority)
    [Anonymous Symbol]                       0x00002784   Section        0  rtx_thread.o(.text.svcRtxThreadSetPriority)
    i.__scatterload_copy                     0x000027cc   Section       14  handlers.o(i.__scatterload_copy)
    i.__scatterload_zeroinit                 0x000027da   Section       14  handlers.o(i.__scatterload_zeroinit)
    __tagsym$$used.0                         0x000027e8   Number         0  rtx_lib.o(.rodata)
    __tagsym$$used.1                         0x00002850   Number         0  rtx_lib.o(.rodata)
    os_idle_thread_attr                      0x0000288c   Data          36  rtx_lib.o(.rodata.os_idle_thread_attr)
    [Anonymous Symbol]                       0x0000288c   Section        0  rtx_lib.o(.rodata.os_idle_thread_attr)
    os_timer_mq_attr                         0x000028b0   Data          24  rtx_lib.o(.rodata.os_timer_mq_attr)
    [Anonymous Symbol]                       0x000028b0   Section        0  rtx_lib.o(.rodata.os_timer_mq_attr)
    os_timer_thread_attr                     0x000028c8   Data          36  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x000028c8   Section        0  rtx_lib.o(.rodata.os_timer_thread_attr)
    .L.str                                   0x000028ec   Data          11  rtx_kernel.o(.rodata.str1.4)
    [Anonymous Symbol]                       0x000028ec   Section        0  rtx_kernel.o(.rodata.str1.4)
    PendST                                   0x1ffff0a8   Data           1  os_systick.o(.bss.PendST)
    [Anonymous Symbol]                       0x1ffff0a8   Section        0  os_systick.o(.bss.PendST)
    os_isr_queue                             0x1ffff0c0   Data          64  rtx_lib.o(.bss.os)
    [Anonymous Symbol]                       0x1ffff0c0   Section        0  rtx_lib.o(.bss.os)
    os_mem                                   0x1ffff100   Data        4096  rtx_lib.o(.bss.os)
    os_timer_mq_cb                           0x20000100   Data          52  rtx_lib.o(.bss.os.msgqueue.cb)
    [Anonymous Symbol]                       0x20000100   Section        0  rtx_lib.o(.bss.os.msgqueue.cb)
    os_timer_mq_data                         0x20000134   Data          80  rtx_lib.o(.bss.os.msgqueue.mem)
    [Anonymous Symbol]                       0x20000134   Section        0  rtx_lib.o(.bss.os.msgqueue.mem)
    os_idle_thread_cb                        0x20000184   Data          68  rtx_lib.o(.bss.os.thread.cb)
    [Anonymous Symbol]                       0x20000184   Section        0  rtx_lib.o(.bss.os.thread.cb)
    os_timer_thread_cb                       0x200001c8   Data          68  rtx_lib.o(.bss.os.thread.cb)
    os_idle_thread_stack                     0x20000210   Data         256  rtx_lib.o(.bss.os.thread.stack)
    [Anonymous Symbol]                       0x20000210   Section        0  rtx_lib.o(.bss.os.thread.stack)
    os_timer_thread_stack                    0x20000310   Data         256  rtx_lib.o(.bss.os.thread.stack)
    rx_data                                  0x20000414   Data           1  main.o(.bss.rx_data)
    [Anonymous Symbol]                       0x20000414   Section        0  main.o(.bss.rx_data)
    STACK                                    0x20000428   Section      256  startup_mkl25z4.o(STACK)

    Global Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    BuildAttributes$$THM_ISAv3M$S$PE$A:L22$X:L11$S22$IEEE1$IW$~IW$USESV6$~STKCKD$USESV7$~SHL$OTIME$EBA8$MICROLIB$REQ8$PRES8$EABIv2 0x00000000   Number         0  anon$$obj.o ABSOLUTE
    __Vectors                                0x00000000   Data           4  startup_mkl25z4.o(RESET)
    .bss.os.evflags.cb$$Base                  - Undefined Weak Reference
    .bss.os.evflags.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mempool.cb$$Base                  - Undefined Weak Reference
    .bss.os.mempool.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mutex.cb$$Base                    - Undefined Weak Reference
    .bss.os.mutex.cb$$Limit                   - Undefined Weak Reference
    .bss.os.semaphore.cb$$Base                - Undefined Weak Reference
    .bss.os.semaphore.cb$$Limit               - Undefined Weak Reference
    .bss.os.timer.cb$$Base                    - Undefined Weak Reference
    .bss.os.timer.cb$$Limit                   - Undefined Weak Reference
    __cpp_initialize__aeabi_                  - Undefined Weak Reference
    __cxa_finalize                            - Undefined Weak Reference
    __decompress                              - Undefined Weak Reference
    _clock_init                               - Undefined Weak Reference
    _microlib_exit                            - Undefined Weak Reference
    __Vectors_End                            0x000000c0   Data           0  startup_mkl25z4.o(RESET)
    __Vectors_Size                           0x000000c0   Number         0  startup_mkl25z4.o ABSOLUTE
    __main                                   0x000000c1   Thumb Code     0  entry.o(.ARM.Collect$$$$00000000)
    _main_stk                                0x000000c1   Thumb Code     0  entry2.o(.ARM.Collect$$$$00000001)
    _main_scatterload                        0x000000c5   Thumb Code     0  entry5.o(.ARM.Collect$$$$00000004)
    __main_after_scatterload                 0x000000c9   Thumb Code     0  entry5.o(.ARM.Collect$$$$00000004)
    _main_clock                              0x000000c9   Thumb Code     0  entry7b.o(.ARM.Collect$$$$00000008)
    _main_cpp_init                           0x000000c9   Thumb Code     0  entry8b.o(.ARM.Collect$$$$0000000A)
    _main_init                               0x000000c9   Thumb Code     0  entry9a.o(.ARM.Collect$$$$0000000B)
    __rt_final_cpp                           0x000000d1   Thumb Code     0  entry10a.o(.ARM.Collect$$$$0000000D)
    __rt_final_exit                          0x000000d1   Thumb Code     0  entry11a.o(.ARM.Collect$$$$0000000F)
    Reset_Handler                            0x000000d5   Thumb Code    12  startup_mkl25z4.o(.text)
    NMI_Handler                              0x000000e1   Thumb Code     2  startup_mkl25z4.o(.text)
    HardFault_Handler                        0x000000e3   Thumb Code     2  startup_mkl25z4.o(.text)
    ADC0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    CMP0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DAC0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA2_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DMA3_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    DefaultISR                               0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    FTFA_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    I2C0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    I2C1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    LLWU_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    LPTMR0_IRQHandler                        0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    LVD_LVW_IRQHandler                       0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    MCG_IRQHandler                           0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    PIT_IRQHandler                           0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    PORTA_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    PORTD_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    RTC_IRQHandler                           0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    RTC_Seconds_IRQHandler                   0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved20_IRQHandler                    0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved39_IRQHandler                    0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    Reserved45_IRQHandler                    0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    SPI0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    SPI1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM1_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TPM2_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    TSI0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    UART0_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    UART2_IRQHandler                         0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    USB0_IRQHandler                          0x000000eb   Thumb Code     0  startup_mkl25z4.o(.text)
    SVC_Handler                              0x000000fd   Thumb Code   132  irq_cm0.o(.text)
    PendSV_Handler                           0x00000181   Thumb Code    12  irq_cm0.o(.text)
    SysTick_Handler                          0x0000018d   Thumb Code    12  irq_cm0.o(.text)
    __aeabi_memcpy                           0x000001a1   Thumb Code    36  memcpya.o(.text)
    __aeabi_memcpy4                          0x000001a1   Thumb Code     0  memcpya.o(.text)
    __aeabi_memcpy8                          0x000001a1   Thumb Code     0  memcpya.o(.text)
    __aeabi_memset                           0x000001c5   Thumb Code    14  memseta.o(.text)
    __aeabi_memset4                          0x000001c5   Thumb Code     0  memseta.o(.text)
    __aeabi_memset8                          0x000001c5   Thumb Code     0  memseta.o(.text)
    __aeabi_memclr                           0x000001d3   Thumb Code     4  memseta.o(.text)
    __aeabi_memclr4                          0x000001d3   Thumb Code     0  memseta.o(.text)
    __aeabi_memclr8                          0x000001d3   Thumb Code     0  memseta.o(.text)
    _memset$wrapper                          0x000001d7   Thumb Code    18  memseta.o(.text)
    __aeabi_uidiv                            0x000001e9   Thumb Code     0  uidiv_div0.o(.text)
    __aeabi_uidivmod                         0x000001e9   Thumb Code    62  uidiv_div0.o(.text)
    __aeabi_idiv                             0x00000229   Thumb Code     0  idiv_div0.o(.text)
    __aeabi_idivmod$div0                     0x00000229   Thumb Code    74  idiv_div0.o(.text)
    __scatterload                            0x00000279   Thumb Code    28  init.o(.text)
    __scatterload_rt2                        0x00000279   Thumb Code     0  init.o(.text)
    InitUART1                                0x000002ed   Thumb Code   116  uart.o(.text.InitUART1)
    OS_Tick_AcknowledgeIRQ                   0x000003e9   Thumb Code     8  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    OS_Tick_GetIRQn                          0x000003f1   Thumb Code     6  os_systick.o(.text.OS_Tick_GetIRQn)
    osRtxErrorNotify                         0x000003f7   Thumb Code     2  rtx_config.o(.text.osRtxErrorNotify)
    osRtxIdleThread                          0x000003f9   Thumb Code     2  rtx_config.o(.text.osRtxIdleThread)
    osRtxKernelPreInit                       0x000003fb   Thumb Code     2  rtx_kernel.o(.text.osRtxKernelPreInit)
    __scatterload_null                       0x000003fd   Thumb Code     2  handlers.o(i.__scatterload_null)
    OS_Tick_Enable                           0x00000475   Thumb Code    36  os_systick.o(.text.OS_Tick_Enable)
    OS_Tick_Setup                            0x00000499   Thumb Code    72  os_systick.o(.text.OS_Tick_Setup)
    SystemCoreClockUpdate                    0x0000052d   Thumb Code   240  system_mkl25z4.o(.text.SystemCoreClockUpdate)
    SystemInit                               0x00000639   Thumb Code   188  system_mkl25z4.o(.text.SystemInit)
    UART1_IRQHandler                         0x000007bd   Thumb Code    24  main.o(.text.UART1_IRQHandler)
    UART_led_control                         0x000007dd   Thumb Code   180  main.o(.text.UART_led_control)
    changeFrequency                          0x000008b1   Thumb Code    40  buzzer.o(.text.changeFrequency)
    endBuzzer                                0x000008e1   Thumb Code   436  buzzer.o(.text.endBuzzer)
    forwardLeft                              0x00000aa5   Thumb Code    20  motor_control.o(.text.forwardLeft)
    forwardRight                             0x00000ab9   Thumb Code    20  motor_control.o(.text.forwardRight)
    initBuzzerPWM                            0x00000acd   Thumb Code   108  buzzer.o(.text.initBuzzerPWM)
    initGPIOLED                              0x00000b41   Thumb Code   236  colorhandler.o(.text.initGPIOLED)
    initPWM                                  0x00000c41   Thumb Code   188  pwm.o(.text.initPWM)
    main                                     0x00000d11   Thumb Code   252  main.o(.text.main)
    moveBackward                             0x00000e35   Thumb Code    16  motor_control.o(.text.moveBackward)
    moveForward                              0x00000e49   Thumb Code    16  motor_control.o(.text.moveForward)
    movingBuzzer                             0x00000e61   Thumb Code   436  main.o(.text.movingBuzzer)
    movingGreenLED                           0x0000101d   Thumb Code    24  main.o(.text.movingGreenLED)
    movingRedLED                             0x00001039   Thumb Code    24  main.o(.text.movingRedLED)
    osDelay                                  0x00001055   Thumb Code    40  rtx_delay.o(.text.osDelay)
    osEventFlagsClear                        0x0000107d   Thumb Code    36  rtx_evflags.o(.text.osEventFlagsClear)
    osEventFlagsNew                          0x000010a1   Thumb Code    36  rtx_evflags.o(.text.osEventFlagsNew)
    osEventFlagsSet                          0x000010c5   Thumb Code    80  rtx_evflags.o(.text.osEventFlagsSet)
    osEventFlagsWait                         0x00001115   Thumb Code    68  rtx_evflags.o(.text.osEventFlagsWait)
    osKernelInitialize                       0x00001159   Thumb Code    40  rtx_kernel.o(.text.osKernelInitialize)
    osKernelStart                            0x00001181   Thumb Code    36  rtx_kernel.o(.text.osKernelStart)
    osMessageQueueGet                        0x000011a5   Thumb Code   116  rtx_msgqueue.o(.text.osMessageQueueGet)
    osMessageQueueNew                        0x00001219   Thumb Code    36  rtx_msgqueue.o(.text.osMessageQueueNew)
    osMessageQueuePut                        0x0000123d   Thumb Code   120  rtx_msgqueue.o(.text.osMessageQueuePut)
    osRtxMemoryAlloc                         0x000012e9   Thumb Code   124  rtx_memory.o(.text.osRtxMemoryAlloc)
    osRtxMemoryFree                          0x00001365   Thumb Code    78  rtx_memory.o(.text.osRtxMemoryFree)
    osRtxMemoryInit                          0x000013b3   Thumb Code    50  rtx_memory.o(.text.osRtxMemoryInit)
    osRtxMemoryPoolAlloc                     0x000013e5   Thumb Code    46  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    osRtxMemoryPoolFree                      0x00001413   Thumb Code    58  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    osRtxMemoryPoolInit                      0x0000144d   Thumb Code    62  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMutexOwnerRelease                   0x00001547   Thumb Code    68  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    osRtxPendSV_Handler                      0x0000158d   Thumb Code   124  rtx_system.o(.text.osRtxPendSV_Handler)
    osRtxPostProcess                         0x00001609   Thumb Code   104  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadDelayTick                     0x00001785   Thumb Code    52  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDispatch                      0x000017b9   Thumb Code    76  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadListGet                       0x00001855   Thumb Code    20  rtx_thread.o(.text.osRtxThreadListGet)
    osRtxThreadListPut                       0x00001869   Thumb Code    44  rtx_thread.o(.text.osRtxThreadListPut)
    osRtxThreadListRemove                    0x00001895   Thumb Code    24  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListSort                      0x000018ad   Thumb Code    38  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadReadyPut                      0x000018f9   Thumb Code    20  rtx_thread.o(.text.osRtxThreadReadyPut)
    osRtxThreadRegPtr                        0x0000190d   Thumb Code     6  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadStackCheck                    0x00001915   Thumb Code    44  rtx_thread.o(.text.osRtxThreadStackCheck)
    osRtxThreadStartup                       0x00001941   Thumb Code    56  rtx_thread.o(.text.osRtxThreadStartup)
    osRtxThreadSwitch                        0x00001979   Thumb Code    16  rtx_thread.o(.text.osRtxThreadSwitch)
    osRtxThreadWaitEnter                     0x00001989   Thumb Code    60  rtx_thread.o(.text.osRtxThreadWaitEnter)
    osRtxThreadWaitExit                      0x000019c5   Thumb Code    34  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxTick_Handler                        0x000019e9   Thumb Code   116  rtx_system.o(.text.osRtxTick_Handler)
    osRtxTimerThread                         0x00001a5d   Thumb Code    60  rtx_timer.o(.text.osRtxTimerThread)
    osSemaphoreAcquire                       0x00001af9   Thumb Code    68  rtx_semaphore.o(.text.osSemaphoreAcquire)
    osSemaphoreNew                           0x00001b3d   Thumb Code    36  rtx_semaphore.o(.text.osSemaphoreNew)
    osSemaphoreRelease                       0x00001b61   Thumb Code    76  rtx_semaphore.o(.text.osSemaphoreRelease)
    osThreadExit                             0x00001bad   Thumb Code    12  rtx_thread.o(.text.osThreadExit)
    osThreadNew                              0x00001bb9   Thumb Code    36  rtx_thread.o(.text.osThreadNew)
    osThreadSetPriority                      0x00001bdd   Thumb Code    40  rtx_thread.o(.text.osThreadSetPriority)
    rotateLeft                               0x00001c05   Thumb Code    16  motor_control.o(.text.rotateLeft)
    rotateRight                              0x00001c15   Thumb Code    16  motor_control.o(.text.rotateRight)
    startFastFlashRed                        0x00001c29   Thumb Code    36  colorhandler.o(.text.startFastFlashRed)
    startMovingGreen                         0x00001c4d   Thumb Code    88  colorhandler.o(.text.startMovingGreen)
    startSlowFlashRed                        0x00001ca5   Thumb Code    40  colorhandler.o(.text.startSlowFlashRed)
    startStationGreen                        0x00001cd9   Thumb Code    12  colorhandler.o(.text.startStationGreen)
    stationGreenLED                          0x00001ce9   Thumb Code    24  main.o(.text.stationGreenLED)
    stationRedLED                            0x00001d05   Thumb Code    24  main.o(.text.stationRedLED)
    stopBuzzer                               0x00001d21   Thumb Code    20  main.o(.text.stopBuzzer)
    stopMotors                               0x00001d39   Thumb Code    16  motor_control.o(.text.stopMotors)
    __scatterload_copy                       0x000027cd   Thumb Code    14  handlers.o(i.__scatterload_copy)
    __scatterload_zeroinit                   0x000027db   Thumb Code    14  handlers.o(i.__scatterload_zeroinit)
    osRtxConfig                              0x000027e8   Data         104  rtx_lib.o(.rodata)
    os_cb_sections                           0x00002850   Data          56  rtx_lib.o(.rodata)
    osRtxUserSVC                             0x00002888   Data           4  rtx_lib.o(.rodata.osRtxUserSVC)
    Region$$Table$$Base                      0x000028f8   Number         0  anon$$obj.o(Region$$Table)
    Region$$Table$$Limit                     0x00002918   Number         0  anon$$obj.o(Region$$Table)
    SystemCoreClock                          0x1ffff000   Data           4  system_mkl25z4.o(.data.SystemCoreClock)
    osRtxInfo                                0x1ffff004   Data         164  rtx_kernel.o(.data.os)
    cnvValue                                 0x1ffff0ac   Data           4  buzzer.o(.bss.cnvValue)
    endSem                                   0x1ffff0b0   Data           4  main.o(.bss.endSem)
    modValue                                 0x1ffff0b4   Data           4  buzzer.o(.bss.modValue)
    movingGreenFlag                          0x1ffff0b8   Data           4  main.o(.bss.movingGreenFlag)
    movingRedFlag                            0x1ffff0bc   Data           4  main.o(.bss.movingRedFlag)
    .bss.os.msgqueue.cb$$Base                0x20000100   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.cb$$Limit               0x20000134   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.thread.cb$$Base                  0x20000184   Number         0  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.cb$$Limit                 0x2000020c   Number         0  rtx_lib.o(.bss.os.thread.cb)
    runningBuzzerFlag                        0x20000410   Data           4  main.o(.bss.runningBuzzerFlag)
    startSem                                 0x20000418   Data           4  main.o(.bss.startSem)
    stationGreenFlag                         0x2000041c   Data           4  main.o(.bss.stationGreenFlag)
    stationRedFlag                           0x20000420   Data           4  main.o(.bss.stationRedFlag)
    __initial_sp                             0x20000528   Data           0  startup_mkl25z4.o(STACK)



==============================================================================

Memory Map of the image

  Image Entry point : 0x000000d5

  Load Region LR_1 (Base: 0x00000000, Size: 0x000029c0, Max: 0xffffffff, ABSOLUTE)

    Execution Region ER_RO (Exec base: 0x00000000, Load base: 0x00000000, Size: 0x00002918, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x00000000   0x00000000   0x000000c0   Data   RO          150    RESET               startup_mkl25z4.o
    0x000000c0   0x000000c0   0x00000000   Code   RO          717  * .ARM.Collect$$$$00000000  mc_p.l(entry.o)
    0x000000c0   0x000000c0   0x00000004   Code   RO          734    .ARM.Collect$$$$00000001  mc_p.l(entry2.o)
    0x000000c4   0x000000c4   0x00000004   Code   RO          737    .ARM.Collect$$$$00000004  mc_p.l(entry5.o)
    0x000000c8   0x000000c8   0x00000000   Code   RO          739    .ARM.Collect$$$$00000008  mc_p.l(entry7b.o)
    0x000000c8   0x000000c8   0x00000000   Code   RO          741    .ARM.Collect$$$$0000000A  mc_p.l(entry8b.o)
    0x000000c8   0x000000c8   0x00000008   Code   RO          742    .ARM.Collect$$$$0000000B  mc_p.l(entry9a.o)
    0x000000d0   0x000000d0   0x00000000   Code   RO          744    .ARM.Collect$$$$0000000D  mc_p.l(entry10a.o)
    0x000000d0   0x000000d0   0x00000000   Code   RO          746    .ARM.Collect$$$$0000000F  mc_p.l(entry11a.o)
    0x000000d0   0x000000d0   0x00000004   Code   RO          735    .ARM.Collect$$$$00002712  mc_p.l(entry2.o)
    0x000000d4   0x000000d4   0x00000028   Code   RO          152  * .text               startup_mkl25z4.o
    0x000000fc   0x000000fc   0x000000a4   Code   RO          469    .text               RTX_CM0.lib(irq_cm0.o)
    0x000001a0   0x000001a0   0x00000024   Code   RO          728    .text               mc_p.l(memcpya.o)
    0x000001c4   0x000001c4   0x00000024   Code   RO          730    .text               mc_p.l(memseta.o)
    0x000001e8   0x000001e8   0x0000003e   Code   RO          752    .text               mc_p.l(uidiv_div0.o)
    0x00000226   0x00000226   0x00000002   PAD
    0x00000228   0x00000228   0x00000050   Code   RO          754    .text               mc_p.l(idiv_div0.o)
    0x00000278   0x00000278   0x00000024   Code   RO          758    .text               mc_p.l(init.o)
    0x0000029c   0x0000029c   0x0000004e   Code   RO          411    .text.EventFlagsCheck  RTX_CM0.lib(rtx_evflags.o)
    0x000002ea   0x000002ea   0x00000002   PAD
    0x000002ec   0x000002ec   0x00000090   Code   RO          112    .text.InitUART1     uart.o
    0x0000037c   0x0000037c   0x0000004c   Code   RO          701    .text.MessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x000003c8   0x000003c8   0x0000001e   Code   RO          693    .text.MessageQueueRemove  RTX_CM0.lib(rtx_msgqueue.o)
    0x000003e6   0x000003e6   0x00000002   PAD
    0x000003e8   0x000003e8   0x00000008   Code   RO          639    .text.OS_Tick_AcknowledgeIRQ  RTX_CM0.lib(os_systick.o)
    0x000003f0   0x000003f0   0x00000006   Code   RO          641    .text.OS_Tick_GetIRQn  RTX_CM0.lib(os_systick.o)
    0x000003f6   0x000003f6   0x00000002   Code   RO          140    .text.osRtxErrorNotify  rtx_config.o
    0x000003f8   0x000003f8   0x00000002   Code   RO          138    .text.osRtxIdleThread  rtx_config.o
    0x000003fa   0x000003fa   0x00000002   Code   RO          174    .text.osRtxKernelPreInit  RTX_CM0.lib(rtx_kernel.o)
    0x000003fc   0x000003fc   0x00000002   Code   RO          763    i.__scatterload_null  mc_p.l(handlers.o)
    0x000003fe   0x000003fe   0x00000002   PAD
    0x00000400   0x00000400   0x00000010   Code   RO          151    .ARM.__at_0x400     startup_mkl25z4.o
    0x00000410   0x00000410   0x00000062   Code   RO          695    .text.MessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x00000472   0x00000472   0x00000002   PAD
    0x00000474   0x00000474   0x00000024   Code   RO          635    .text.OS_Tick_Enable  RTX_CM0.lib(os_systick.o)
    0x00000498   0x00000498   0x00000048   Code   RO          633    .text.OS_Tick_Setup  RTX_CM0.lib(os_systick.o)
    0x000004e0   0x000004e0   0x00000024   Code   RO          448    .text.SemaphoreTokenDecrement  RTX_CM0.lib(rtx_semaphore.o)
    0x00000504   0x00000504   0x00000026   Code   RO          454    .text.SemaphoreTokenIncrement  RTX_CM0.lib(rtx_semaphore.o)
    0x0000052a   0x0000052a   0x00000002   PAD
    0x0000052c   0x0000052c   0x0000010c   Code   RO          163    .text.SystemCoreClockUpdate  system_mkl25z4.o
    0x00000638   0x00000638   0x000000e8   Code   RO          161    .text.SystemInit    system_mkl25z4.o
    0x00000720   0x00000720   0x0000004e   Code   RO          319    .text.ThreadFlagsCheck  RTX_CM0.lib(rtx_thread.o)
    0x0000076e   0x0000076e   0x00000002   PAD
    0x00000770   0x00000770   0x0000004c   Code   RO          490    .text.TimerInsert   RTX_CM0.lib(rtx_timer.o)
    0x000007bc   0x000007bc   0x00000020   Code   RO            6    .text.UART1_IRQHandler  main.o
    0x000007dc   0x000007dc   0x000000d4   Code   RO            8    .text.UART_led_control  main.o
    0x000008b0   0x000008b0   0x00000030   Code   RO           96    .text.changeFrequency  buzzer.o
    0x000008e0   0x000008e0   0x000001c4   Code   RO          100    .text.endBuzzer     buzzer.o
    0x00000aa4   0x00000aa4   0x00000014   Code   RO           60    .text.forwardLeft   motor_control.o
    0x00000ab8   0x00000ab8   0x00000014   Code   RO           62    .text.forwardRight  motor_control.o
    0x00000acc   0x00000acc   0x00000074   Code   RO           90    .text.initBuzzerPWM  buzzer.o
    0x00000b40   0x00000b40   0x00000100   Code   RO           73    .text.initGPIOLED   colorhandler.o
    0x00000c40   0x00000c40   0x000000d0   Code   RO           40    .text.initPWM       pwm.o
    0x00000d10   0x00000d10   0x00000124   Code   RO           22    .text.main          main.o
    0x00000e34   0x00000e34   0x00000014   Code   RO           64    .text.moveBackward  motor_control.o
    0x00000e48   0x00000e48   0x00000018   Code   RO           54    .text.moveForward   motor_control.o
    0x00000e60   0x00000e60   0x000001bc   Code   RO           18    .text.movingBuzzer  main.o
    0x0000101c   0x0000101c   0x0000001c   Code   RO           10    .text.movingGreenLED  main.o
    0x00001038   0x00001038   0x0000001c   Code   RO           14    .text.movingRedLED  main.o
    0x00001054   0x00001054   0x00000028   Code   RO          372    .text.osDelay       RTX_CM0.lib(rtx_delay.o)
    0x0000107c   0x0000107c   0x00000024   Code   RO          395    .text.osEventFlagsClear  RTX_CM0.lib(rtx_evflags.o)
    0x000010a0   0x000010a0   0x00000024   Code   RO          389    .text.osEventFlagsNew  RTX_CM0.lib(rtx_evflags.o)
    0x000010c4   0x000010c4   0x00000050   Code   RO          393    .text.osEventFlagsSet  RTX_CM0.lib(rtx_evflags.o)
    0x00001114   0x00001114   0x00000044   Code   RO          403    .text.osEventFlagsWait  RTX_CM0.lib(rtx_evflags.o)
    0x00001158   0x00001158   0x00000028   Code   RO          176    .text.osKernelInitialize  RTX_CM0.lib(rtx_kernel.o)
    0x00001180   0x00001180   0x00000024   Code   RO          186    .text.osKernelStart  RTX_CM0.lib(rtx_kernel.o)
    0x000011a4   0x000011a4   0x00000074   Code   RO          667    .text.osMessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x00001218   0x00001218   0x00000024   Code   RO          661    .text.osMessageQueueNew  RTX_CM0.lib(rtx_msgqueue.o)
    0x0000123c   0x0000123c   0x00000078   Code   RO          665    .text.osMessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x000012b4   0x000012b4   0x00000034   Code   RO          409    .text.osRtxEventFlagsPostProcess  RTX_CM0.lib(rtx_evflags.o)
    0x000012e8   0x000012e8   0x0000007c   Code   RO          552    .text.osRtxMemoryAlloc  RTX_CM0.lib(rtx_memory.o)
    0x00001364   0x00001364   0x0000004e   Code   RO          554    .text.osRtxMemoryFree  RTX_CM0.lib(rtx_memory.o)
    0x000013b2   0x000013b2   0x00000032   Code   RO          550    .text.osRtxMemoryInit  RTX_CM0.lib(rtx_memory.o)
    0x000013e4   0x000013e4   0x0000002e   Code   RO          567    .text.osRtxMemoryPoolAlloc  RTX_CM0.lib(rtx_mempool.o)
    0x00001412   0x00001412   0x0000003a   Code   RO          569    .text.osRtxMemoryPoolFree  RTX_CM0.lib(rtx_mempool.o)
    0x0000144c   0x0000144c   0x0000003e   Code   RO          565    .text.osRtxMemoryPoolInit  RTX_CM0.lib(rtx_mempool.o)
    0x0000148a   0x0000148a   0x000000bc   Code   RO          691    .text.osRtxMessageQueuePostProcess  RTX_CM0.lib(rtx_msgqueue.o)
    0x00001546   0x00001546   0x00000044   Code   RO          515    .text.osRtxMutexOwnerRelease  RTX_CM0.lib(rtx_mutex.o)
    0x0000158a   0x0000158a   0x00000002   PAD
    0x0000158c   0x0000158c   0x0000007c   Code   RO          620    .text.osRtxPendSV_Handler  RTX_CM0.lib(rtx_system.o)
    0x00001608   0x00001608   0x00000068   Code   RO          622    .text.osRtxPostProcess  RTX_CM0.lib(rtx_system.o)
    0x00001670   0x00001670   0x00000024   Code   RO          446    .text.osRtxSemaphorePostProcess  RTX_CM0.lib(rtx_semaphore.o)
    0x00001694   0x00001694   0x00000034   Code   RO          259    .text.osRtxThreadBlock  RTX_CM0.lib(rtx_thread.o)
    0x000016c8   0x000016c8   0x0000007c   Code   RO          267    .text.osRtxThreadDelayInsert  RTX_CM0.lib(rtx_thread.o)
    0x00001744   0x00001744   0x00000040   Code   RO          263    .text.osRtxThreadDelayRemove  RTX_CM0.lib(rtx_thread.o)
    0x00001784   0x00001784   0x00000034   Code   RO          249    .text.osRtxThreadDelayTick  RTX_CM0.lib(rtx_thread.o)
    0x000017b8   0x000017b8   0x0000004c   Code   RO          257    .text.osRtxThreadDispatch  RTX_CM0.lib(rtx_thread.o)
    0x00001804   0x00001804   0x00000050   Code   RO          343    .text.osRtxThreadFree  RTX_CM0.lib(rtx_thread.o)
    0x00001854   0x00001854   0x00000014   Code   RO          241    .text.osRtxThreadListGet  RTX_CM0.lib(rtx_thread.o)
    0x00001868   0x00001868   0x0000002c   Code   RO          239    .text.osRtxThreadListPut  RTX_CM0.lib(rtx_thread.o)
    0x00001894   0x00001894   0x00000018   Code   RO          245    .text.osRtxThreadListRemove  RTX_CM0.lib(rtx_thread.o)
    0x000018ac   0x000018ac   0x00000026   Code   RO          243    .text.osRtxThreadListSort  RTX_CM0.lib(rtx_thread.o)
    0x000018d2   0x000018d2   0x00000026   Code   RO          317    .text.osRtxThreadPostProcess  RTX_CM0.lib(rtx_thread.o)
    0x000018f8   0x000018f8   0x00000014   Code   RO          247    .text.osRtxThreadReadyPut  RTX_CM0.lib(rtx_thread.o)
    0x0000190c   0x0000190c   0x00000006   Code   RO          251    .text.osRtxThreadRegPtr  RTX_CM0.lib(rtx_thread.o)
    0x00001912   0x00001912   0x00000002   PAD
    0x00001914   0x00001914   0x0000002c   Code   RO          255    .text.osRtxThreadStackCheck  RTX_CM0.lib(rtx_thread.o)
    0x00001940   0x00001940   0x00000038   Code   RO          269    .text.osRtxThreadStartup  RTX_CM0.lib(rtx_thread.o)
    0x00001978   0x00001978   0x00000010   Code   RO          253    .text.osRtxThreadSwitch  RTX_CM0.lib(rtx_thread.o)
    0x00001988   0x00001988   0x0000003c   Code   RO          265    .text.osRtxThreadWaitEnter  RTX_CM0.lib(rtx_thread.o)
    0x000019c4   0x000019c4   0x00000022   Code   RO          261    .text.osRtxThreadWaitExit  RTX_CM0.lib(rtx_thread.o)
    0x000019e6   0x000019e6   0x00000002   PAD
    0x000019e8   0x000019e8   0x00000074   Code   RO          618    .text.osRtxTick_Handler  RTX_CM0.lib(rtx_system.o)
    0x00001a5c   0x00001a5c   0x0000003c   Code   RO          474    .text.osRtxTimerThread  RTX_CM0.lib(rtx_timer.o)
    0x00001a98   0x00001a98   0x00000060   Code   RO          476    .text.osRtxTimerTick  RTX_CM0.lib(rtx_timer.o)
    0x00001af8   0x00001af8   0x00000044   Code   RO          434    .text.osSemaphoreAcquire  RTX_CM0.lib(rtx_semaphore.o)
    0x00001b3c   0x00001b3c   0x00000024   Code   RO          430    .text.osSemaphoreNew  RTX_CM0.lib(rtx_semaphore.o)
    0x00001b60   0x00001b60   0x0000004c   Code   RO          436    .text.osSemaphoreRelease  RTX_CM0.lib(rtx_semaphore.o)
    0x00001bac   0x00001bac   0x0000000c   Code   RO          301    .text.osThreadExit  RTX_CM0.lib(rtx_thread.o)
    0x00001bb8   0x00001bb8   0x00000024   Code   RO          273    .text.osThreadNew   RTX_CM0.lib(rtx_thread.o)
    0x00001bdc   0x00001bdc   0x00000028   Code   RO          287    .text.osThreadSetPriority  RTX_CM0.lib(rtx_thread.o)
    0x00001c04   0x00001c04   0x00000010   Code   RO           56    .text.rotateLeft    motor_control.o
    0x00001c14   0x00001c14   0x00000014   Code   RO           58    .text.rotateRight   motor_control.o
    0x00001c28   0x00001c28   0x00000024   Code   RO           81    .text.startFastFlashRed  colorhandler.o
    0x00001c4c   0x00001c4c   0x00000058   Code   RO           75    .text.startMovingGreen  colorhandler.o
    0x00001ca4   0x00001ca4   0x00000034   Code   RO           79    .text.startSlowFlashRed  colorhandler.o
    0x00001cd8   0x00001cd8   0x00000010   Code   RO           77    .text.startStationGreen  colorhandler.o
    0x00001ce8   0x00001ce8   0x0000001c   Code   RO           12    .text.stationGreenLED  main.o
    0x00001d04   0x00001d04   0x0000001c   Code   RO           16    .text.stationRedLED  main.o
    0x00001d20   0x00001d20   0x00000018   Code   RO           20    .text.stopBuzzer    main.o
    0x00001d38   0x00001d38   0x00000014   Code   RO           52    .text.stopMotors    motor_control.o
    0x00001d4c   0x00001d4c   0x00000012   Code   RO          376    .text.svcRtxDelay   RTX_CM0.lib(rtx_delay.o)
    0x00001d5e   0x00001d5e   0x00000032   Code   RO          397    .text.svcRtxEventFlagsClear  RTX_CM0.lib(rtx_evflags.o)
    0x00001d90   0x00001d90   0x00000074   Code   RO          407    .text.svcRtxEventFlagsNew  RTX_CM0.lib(rtx_evflags.o)
    0x00001e04   0x00001e04   0x0000007c   Code   RO          415    .text.svcRtxEventFlagsSet  RTX_CM0.lib(rtx_evflags.o)
    0x00001e80   0x00001e80   0x00000060   Code   RO          417    .text.svcRtxEventFlagsWait  RTX_CM0.lib(rtx_evflags.o)
    0x00001ee0   0x00001ee0   0x00000140   Code   RO          214    .text.svcRtxKernelInitialize  RTX_CM0.lib(rtx_kernel.o)
    0x00002020   0x00002020   0x00000080   Code   RO          216    .text.svcRtxKernelStart  RTX_CM0.lib(rtx_kernel.o)
    0x000020a0   0x000020a0   0x000000e8   Code   RO          703    .text.svcRtxMessageQueueGet  RTX_CM0.lib(rtx_msgqueue.o)
    0x00002188   0x00002188   0x000001e4   Code   RO          689    .text.svcRtxMessageQueueNew  RTX_CM0.lib(rtx_msgqueue.o)
    0x0000236c   0x0000236c   0x000000b8   Code   RO          699    .text.svcRtxMessageQueuePut  RTX_CM0.lib(rtx_msgqueue.o)
    0x00002424   0x00002424   0x00000048   Code   RO          452    .text.svcRtxSemaphoreAcquire  RTX_CM0.lib(rtx_semaphore.o)
    0x0000246c   0x0000246c   0x00000088   Code   RO          444    .text.svcRtxSemaphoreNew  RTX_CM0.lib(rtx_semaphore.o)
    0x000024f4   0x000024f4   0x00000038   Code   RO          456    .text.svcRtxSemaphoreRelease  RTX_CM0.lib(rtx_semaphore.o)
    0x0000252c   0x0000252c   0x0000006c   Code   RO          347    .text.svcRtxThreadExit  RTX_CM0.lib(rtx_thread.o)
    0x00002598   0x00002598   0x000001ec   Code   RO          271    .text.svcRtxThreadNew  RTX_CM0.lib(rtx_thread.o)
    0x00002784   0x00002784   0x00000048   Code   RO          329    .text.svcRtxThreadSetPriority  RTX_CM0.lib(rtx_thread.o)
    0x000027cc   0x000027cc   0x0000000e   Code   RO          762    i.__scatterload_copy  mc_p.l(handlers.o)
    0x000027da   0x000027da   0x0000000e   Code   RO          764    i.__scatterload_zeroinit  mc_p.l(handlers.o)
    0x000027e8   0x000027e8   0x00000068   Data   RO          125    .rodata             rtx_lib.o
    0x00002850   0x00002850   0x00000038   Data   RO          128    .rodata             rtx_lib.o
    0x00002888   0x00002888   0x00000004   Data   RO          127    .rodata.osRtxUserSVC  rtx_lib.o
    0x0000288c   0x0000288c   0x00000024   Data   RO          122    .rodata.os_idle_thread_attr  rtx_lib.o
    0x000028b0   0x000028b0   0x00000018   Data   RO          124    .rodata.os_timer_mq_attr  rtx_lib.o
    0x000028c8   0x000028c8   0x00000024   Data   RO          123    .rodata.os_timer_thread_attr  rtx_lib.o
    0x000028ec   0x000028ec   0x0000000b   Data   RO          228    .rodata.str1.4      RTX_CM0.lib(rtx_kernel.o)
    0x000028f7   0x000028f7   0x00000001   PAD
    0x000028f8   0x000028f8   0x00000020   Data   RO          761    Region$$Table       anon$$obj.o


    Execution Region ER_RW (Exec base: 0x1ffff000, Load base: 0x00002918, Size: 0x000000a8, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x1ffff000   0x00002918   0x00000004   Data   RW          165    .data.SystemCoreClock  system_mkl25z4.o
    0x1ffff004   0x0000291c   0x000000a4   Data   RW          229    .data.os            RTX_CM0.lib(rtx_kernel.o)


    Execution Region ER_ZI (Exec base: 0x1ffff0a8, Load base: 0x000029c0, Size: 0x00001480, Max: 0xffffffff, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x1ffff0a8        -       0x00000001   Zero   RW          651    .bss.PendST         RTX_CM0.lib(os_systick.o)
    0x1ffff0a9   0x000029c0   0x00000003   PAD
    0x1ffff0ac        -       0x00000004   Zero   RW          103    .bss.cnvValue       buzzer.o
    0x1ffff0b0        -       0x00000004   Zero   RW           30    .bss.endSem         main.o
    0x1ffff0b4        -       0x00000004   Zero   RW          102    .bss.modValue       buzzer.o
    0x1ffff0b8        -       0x00000004   Zero   RW           24    .bss.movingGreenFlag  main.o
    0x1ffff0bc        -       0x00000004   Zero   RW           25    .bss.movingRedFlag  main.o
    0x1ffff0c0        -       0x00001040   Zero   RW          121    .bss.os             rtx_lib.o
    0x20000100        -       0x00000034   Zero   RW          131    .bss.os.msgqueue.cb  rtx_lib.o
    0x20000134        -       0x00000050   Zero   RW          132    .bss.os.msgqueue.mem  rtx_lib.o
    0x20000184        -       0x00000088   Zero   RW          129    .bss.os.thread.cb   rtx_lib.o
    0x2000020c   0x000029c0   0x00000004   PAD
    0x20000210        -       0x00000200   Zero   RW          130    .bss.os.thread.stack  rtx_lib.o
    0x20000410        -       0x00000004   Zero   RW           31    .bss.runningBuzzerFlag  main.o
    0x20000414        -       0x00000001   Zero   RW           28    .bss.rx_data        main.o
    0x20000415   0x000029c0   0x00000003   PAD
    0x20000418        -       0x00000004   Zero   RW           29    .bss.startSem       main.o
    0x2000041c        -       0x00000004   Zero   RW           26    .bss.stationGreenFlag  main.o
    0x20000420        -       0x00000004   Zero   RW           27    .bss.stationRedFlag  main.o
    0x20000424   0x000029c0   0x00000004   PAD
    0x20000428        -       0x00000100   Zero   RW          148    STACK               startup_mkl25z4.o


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

       616         32          0          0          8       6468   buzzer.o
       448         36          0          0          0       2603   colorhandler.o
      1116        108          0          0         29       5853   main.o
       140         20          0          0          0       1520   motor_control.o
       208         20          0          0          0       2448   pwm.o
         4          0          0          0          0        715   rtx_config.o
         0          0        260          0       4940       5499   rtx_lib.o
        56         30        192          0        256        920   startup_mkl25z4.o
       500         80          0          4          0       3270   system_mkl25z4.o
       144         28          0          0          0       3701   uart.o

    ----------------------------------------------------------------------
      3232        354        484          4       5244      32997   Object Totals
         0          0         32          0          0          0   (incl. Generated)
         0          0          0          0         11          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Member Name

       164          8          0          0          0        496   irq_cm0.o
       122         16          0          0          1       2766   os_systick.o
        58          4          0          0          0       2753   rtx_delay.o
       736         24          0          0          0      12348   rtx_evflags.o
       526         24         11        164          0      16105   rtx_kernel.o
       252          0          0          0          0       2564   rtx_memory.o
       166          0          0          0          0      14282   rtx_mempool.o
      1564         40          0          0          0      17889   rtx_msgqueue.o
        68          0          0          0          0       9201   rtx_mutex.o
       554         24          0          0          0      10054   rtx_semaphore.o
       344         18          0          0          0       4635   rtx_system.o
      1686         60          0          0          0      30867   rtx_thread.o
       232         20          0          0          0      10018   rtx_timer.o
         0          0          0          0          0          0   entry.o
         0          0          0          0          0          0   entry10a.o
         0          0          0          0          0          0   entry11a.o
         8          4          0          0          0          0   entry2.o
         4          0          0          0          0          0   entry5.o
         0          0          0          0          0          0   entry7b.o
         0          0          0          0          0          0   entry8b.o
         8          4          0          0          0          0   entry9a.o
        30          0          0          0          0          0   handlers.o
        80          6          0          0          0         72   idiv_div0.o
        36          8          0          0          0         68   init.o
        36          0          0          0          0         60   memcpya.o
        36          0          0          0          0        100   memseta.o
        62          0          0          0          0         72   uidiv_div0.o

    ----------------------------------------------------------------------
      6792        260         12        164          4     134350   Library Totals
        20          0          1          0          3          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Name

      6472        238         11        164          1     133978   RTX_CM0.lib
       300         22          0          0          0        372   mc_p.l

    ----------------------------------------------------------------------
      6792        260         12        164          4     134350   Library Totals

    ----------------------------------------------------------------------

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

     10024        614        496        168       5248     167043   Grand Totals
     10024        614        496        168       5248     167043   ELF Image Totals
     10024        614        496        168          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                10520 (  10.27kB)
    Total RW  Size (RW Data + ZI Data)              5416 (   5.29kB)
    Total ROM Size (Code + RO Data + RW Data)      10688 (  10.44kB)

==============================================================================

